/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ComponentListElement, ItemsDisplayMode } from "./components/kup-list/kup-list-declarations";
import { BadgePosition } from "./components/kup-badge/kup-badge-declarations";
import { ComponentCardElement } from "./components/kup-card/kup-card-declarations";
import { Cell, Column, DataTable, GenericFilter, GroupLabelDisplayMode, GroupObject, KupDataTableCellButtonClick, KupDataTableSortedColumnIndexes, LoadMoreMode, PaginatorPos, Row, RowAction, ShowGrid, SortObject, TableData, TotalsMap } from "./components/kup-data-table/kup-data-table-declarations";
import { BoxRow, Layout } from "./components/kup-box/kup-box-declarations";
import { ButtonConfig } from "./components/kup-btn/kup-btn-declarations";
import { ChartAspect, ChartAxis, ChartClickedEvent, ChartType } from "./components/kup-chart/kup-chart-declarations";
import { KupCheckboxMenuItem } from "./components/kup-checkbox-menu/kup-checkbox-menu-declarations";
import { ComponentChipElement } from "./components/kup-chip/kup-chip-declarations";
import { CrudCallBackOnFormEventResult, CrudConfig, CrudRecord, CrudRecordsChanged } from "./components/kup-crud/kup-crud-declarations";
import { FormActionEventDetail, FormActions, FormCells, FormConfig, FormFieldEventDetail, FormFields, FormMessage, FormSection } from "./components/kup-form/kup-form-declarations";
import { SearchFilterSubmittedEventDetail, SearchSelectionUpdatedEventDetail } from "./components/kup-search/kup-search-declarations";
import { KupFldChangeEvent, KupFldSubmitEvent } from "./components/kup-field/kup-field-declarations";
import { ComponentGridElement } from "./components/kup-grid/kup-grid-declarations";
import { Badge, CssDraw } from "./components/kup-image/kup-image-declarations";
import { ComponentNavBarData, ComponentNavBarMode } from "./components/kup-nav-bar/kup-nav-bar-declarations";
import { PaginatorMode } from "./components/kup-paginator/kup-paginator-declarations";
import { KupQlikGrid, QlikServer } from "./components/kup-qlik/kup-qlik-declarations";
import { ComponentRadioElement } from "./components/kup-radio/kup-radio-declarations";
import { ComponentTabBarElement } from "./components/kup-tab-bar/kup-tab-bar-declarations";
import { TooltipAction, TooltipData, TooltipDetailData, TooltipObject } from "./components/kup-tooltip/kup-tooltip-declarations";
import { TreeNode, TreeNodePath } from "./components/kup-tree/kup-tree-declarations";
import { UploadProps } from "./components/kup-upload/kup-upload-declarations";
export namespace Components {
    interface KupAutocomplete {
        /**
          * Function that can be invoked when the filter is updated, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "callBackOnFilterUpdate": (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Props of the list.
         */
        "listData": Object;
        /**
          * The minimum number of chars to trigger the autocomplete
         */
        "minimumChars": number;
        /**
          * Sets how the return the selected item value
         */
        "selectMode": ItemsDisplayMode;
        /**
          * When true, it will emit events to inform the listener of the change of the current filter value. Also the component builtin filter will be disabled.
         */
        "serverHandledFilter": boolean;
        /**
          * Props of the text field.
         */
        "textfieldData": Object;
    }
    interface KupBadge {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * The data of the image displayed inside the badge.
         */
        "imageData": {};
        /**
          * The position of the badge relative to its parent. Supported values: "TL" (top left), "TR" (top right), "BL" (bottom left), "BR" (bottom left).
         */
        "position": BadgePosition;
        /**
          * The text displayed inside the badge.
         */
        "text": string;
    }
    interface KupBox {
        /**
          * Number of columns
         */
        "cardData": ComponentCardElement;
        /**
          * Number of columns
         */
        "columns": number;
        /**
          * Alignment of the content. Can be set to left, right or center.
         */
        "contentAlign": string;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Data
         */
        "data": { columns?: Column[]; rows?: BoxRow[] };
        /**
          * Enable dragging
         */
        "dragEnabled": boolean;
        /**
          * Enable dropping
         */
        "dropEnabled": boolean;
        /**
          * Drop can be done in section
         */
        "dropOnSection": false;
        /**
          * If enabled, a button to load / display the row actions will be displayed on the right of every box
         */
        "enableRowActions": boolean;
        /**
          * Enable filtering
         */
        "filterEnabled": boolean;
        /**
          * How the field will be displayed. If not present, a default one will be created.
         */
        "layout": Layout;
        "loadRowActions": (row: BoxRow, actions: RowAction[]) => Promise<void>;
        /**
          * Enable multi selection
         */
        "multiSelection": boolean;
        /**
          * Removes border
         */
        "noBorder": boolean;
        /**
          * Removes padding
         */
        "noPadding": boolean;
        /**
          * Number of boxes per page
         */
        "pageSize": number;
        /**
          * Enables pagination
         */
        "pagination": boolean;
        /**
          * Automatically selects the box at the specified index
         */
        "selectBox": number;
        /**
          * If enabled, highlights the selected box/boxes
         */
        "showSelection": boolean;
        /**
          * If sorting is enabled, specifies which column to sort
         */
        "sortBy": string;
        /**
          * Enable sorting
         */
        "sortEnabled": boolean;
    }
    interface KupBtn {
        "buttons": any[];
        "config": ButtonConfig;
    }
    interface KupButton {
        /**
          * Defaults at false. When set to true, the icon button state will be on.
         */
        "checked": boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Defaults at false. When set to true, the button will be rendered flat.
         */
        "flat": boolean;
        /**
          * Defaults at false. When set to true fill all the available horizontal space.
         */
        "fullHeight": boolean;
        /**
          * Defaults at false. When set to true fill all the available horizontal space.
         */
        "fullWidth": boolean;
        /**
          * Defaults at null. When set, the button will show this icon.
         */
        "icon": string;
        /**
          * If not set, it will be managed by the component.
         */
        "iconColor": string;
        /**
          * Defaults at null. When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
         */
        "iconOff": string;
        /**
          * Defaults at null. When set, the button will show this text.
         */
        "label": string;
        /**
          * Defaults at false. When set to true, the button will be rendered with a colored outline.
         */
        "outlined": boolean;
        /**
          * Defaults at false. When set to true, the button will be rendered with rounded edges.
         */
        "shaped": boolean;
        /**
          * Defaults at false. When set to true, the icon button will be toggable on/off.
         */
        "toggable": boolean;
        /**
          * When set, this tooltip will be displayed on mouse over (using the HTML attribute title).
         */
        "tooltip": string;
        /**
          * Defaults at null. When set, the icon will be shown after the text.
         */
        "trailingIcon": boolean;
    }
    interface KupCalendar {
        "data": DataTable;
        "dateCol": string;
        "descrCol": string;
        "endCol": string;
        "hideNavigation": boolean;
        "iconCol": string;
        "imageCol": string;
        "initialDate": string;
        "startCol": string;
        "styleCol": string;
        "weekView": boolean;
    }
    interface KupCard {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * The actual data of the card.
         */
        "data": ComponentCardElement;
        /**
          * Defines whether the card is a menu or not.
         */
        "isMenu": boolean;
        /**
          * Sets the type of the card. Currently supported values: "material", "custom", "collapsible".
         */
        "layoutFamily": string;
        /**
          * Sets the number of the layout.
         */
        "layoutNumber": number;
        /**
          * Sets the status of the menu, when false it's hidden otherwise it's visible.
         */
        "menuVisible": boolean;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeX": string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeY": string;
    }
    interface KupChart {
        "asp": ChartAspect;
        "axis": string;
        "colors": string[];
        "data": DataTable;
        "graphTitle": string;
        "graphTitleColor": string;
        "graphTitleSize": number;
        "hAxis": ChartAxis;
        "height": number;
        "legend": boolean;
        "series": string[];
        "showMarks": boolean;
        "stacked": boolean;
        "types": ChartType[];
        "vAxis": ChartAxis;
        /**
          * Google chart version to load
         */
        "version": string;
        "width": number;
    }
    interface KupChartCell {
        "cellConfig"?: any;
        "value": string;
    }
    interface KupCheckbox {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
         */
        "checked": boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Defaults at false. When set to true, the component will be set to 'indeterminate'.
         */
        "indeterminate": boolean;
        /**
          * Defaults at null. When specified, its content will be shown as a label.
         */
        "label": string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel": boolean;
    }
    interface KupCheckboxMenu {
        /**
          * Sets if the checkbox menu should be disabled
         */
        "disabled": boolean;
        /**
          * Chooses which field of an item object should be used to create the list and be filtered.
         */
        "displayedField": string;
        /**
          * The label to show as a placeholder inside the filter input
         */
        "filterLabel": string;
        /**
          * Marks the field as filterable, allowing an input text to filter the options
         */
        "isFilterable": boolean;
        /**
          * Sets the checkbox to be disabled  Must have reflect into the attribute
         */
        "items": KupCheckboxMenuItem[];
        /**
          * The label to set to the component
         */
        "label": string;
        /**
          * Chooses which field of an item object should be used to create the list and be filtered.
         */
        "valueField": string;
    }
    interface KupChip {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * List of elements.
         */
        "data": ComponentChipElement[];
        /**
          * The type of chip. Available types: input, filter, choice or empty for default.
         */
        "type": string;
    }
    interface KupCombobox {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Lets the combobox behave as a select element.
         */
        "isSelect": boolean;
        /**
          * Props of the list.
         */
        "listData": Object;
        /**
          * Sets how the return the elected item value. Suported values: "code", "description", "both".
         */
        "selectMode": ItemsDisplayMode;
        /**
          * Props of the text field.
         */
        "textfieldData": Object;
    }
    interface KupCrud {
        "actions": FormActions;
        "autocompleteCallBackOnFilterUpdate": (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "closeForm": () => Promise<void>;
        "config": CrudConfig;
        "crudCallBackOnFormActionSubmitted": (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged": (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "disabled": boolean;
        "extra": any;
        "extraMessages": FormMessage[];
        "fields": FormFields;
        "openForm": () => Promise<void>;
        "records": CrudRecord[];
        "refid": string;
        "searchCallBackOnFilterSubmitted": (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections": FormSection;
    }
    interface KupDash {
        "active": boolean;
        "fontsize": string;
        "index": number;
        "layout": string;
    }
    interface KupDashList {
        "active": boolean;
        "columnsNumber": number;
        "data": TableData;
        "fontsize": string;
        "fullWidth": boolean;
        "horizontal": boolean;
        "iconColor": Array<any>;
        "layout": string;
        "textColor": Array<any>;
        "valueColor": Array<any>;
    }
    interface KupDataTable {
        /**
          * The data of the table.
         */
        "data": TableData;
        "defaultSortingFunction": (columns: Column[], receivingColumnIndex: number, sortedColumnIndex: number, useNewObject?: boolean) => Promise<Column[]>;
        /**
          * The density of the rows, defaults at 'medium' and can be also set to 'large' or 'small'.
         */
        "density": string;
        /**
          * Enables the sorting of columns by dragging them into different columns.
         */
        "enableSortableColumns": boolean;
        /**
          * Expands groups when set to true.
         */
        "expandGroups": boolean;
        /**
          * List of filters set by the user.
         */
        "filters": GenericFilter;
        /**
          * Fixes the given number of columns so that they stay visible when horizontally scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedRows.
          * @see fixedRows
         */
        "fixedColumns": number;
        /**
          * Fixes the given number of rows so that they stay visible when vertically scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedColumns.
          * @see fixedColumns
         */
        "fixedRows": number;
        /**
          * Forces cells with long text and a fixed column size to have an ellipsis set on their text. The reflect attribute is mandatory to allow styling.
         */
        "forceOneLine": boolean;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter": boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue": string;
        /**
          * How the label of a group must be displayed. For available values [see here]{@link GroupLabelDisplayMode}
         */
        "groupLabelDisplay": GroupLabelDisplayMode;
        /**
          * The list of groups.
         */
        "groups": Array<GroupObject>;
        /**
          * When set to true the header will stick on top of the table when scrolling.
         */
        "headerIsPersistent": boolean;
        /**
          * Defines the placeholder character which will be replaced by a line break inside table header cells, normal or sticky.
         */
        "lineBreakCharacter": string;
        /**
          * Sets a maximum limit of new records which can be required by the load more functionality.
         */
        "loadMoreLimit": number;
        /**
          * Establish the modality of how many new records will be downloaded.  This property is regulated also by loadMoreStep.
          * @see loadMoreStep
          * @see loadMoreLimit
         */
        "loadMoreMode": LoadMoreMode;
        /**
          * The number of records which will be requested to be downloaded when clicking on the load more button.  This property is regulated also by loadMoreMode.
          * @see loadMoreMode
          * @see loadMoreLimit
         */
        "loadMoreStep": number;
        /**
          * When set to true enables rows multi selection.
         */
        "multiSelection": boolean;
        /**
          * Sets the position of the paginator. Available positions: top, bottom or both.
         */
        "paginatorPos": PaginatorPos;
        /**
          * Sets the actions of the rows.
         */
        "rowActions": Array<RowAction>;
        /**
          * Sets the number of rows per page to display.
         */
        "rowsPerPage": number;
        /**
          * Selects the specified row.
         */
        "selectRow": number;
        /**
          * When set to true enables the column filters.
         */
        "showFilters": boolean;
        /**
          * Can be used to customize the grid view of the table.
         */
        "showGrid": ShowGrid;
        /**
          * Enables rendering of the table header.
          * @namespace KupDataTable.showHeader
         */
        "showHeader": boolean;
        /**
          * If set to true, displays the button to load more records.
         */
        "showLoadMore": boolean;
        /**
          * Defines the current sorting options.
         */
        "sort": Array<SortObject>;
        /**
          * When set to true enables the sorting of the columns.
         */
        "sortEnabled": boolean;
        /**
          * If set to true, when a column is dragged to be sorted, the component directly mutates the data.columns property and then fires the event
         */
        "sortableColumnsMutateData": boolean;
        /**
          * Sets the height of the table.
         */
        "tableHeight": string;
        /**
          * Sets the width of the table.
         */
        "tableWidth": string;
        /**
          * Defines the current totals options.
         */
        "totals": TotalsMap;
    }
    interface KupEditor {
        /**
          * The html to be rendered and edited
         */
        "text": string;
    }
    interface KupField {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Effective data to pass to the component.
         */
        "data": Object;
        /**
          * Provides an interface to get the current value programmatically
          * @method getCurrentValue
          * @returns
         */
        "getCurrentValue": () => Promise<string | object>;
        /**
          * The text of the label. If set to empty or has only white space chars, the label will be removed.
         */
        "label": string;
        /**
          * Sets the label's position, left right or top.
         */
        "labelPos": string;
        /**
          * Sets whether the submit button must be displayed or not.
         */
        "showSubmit": boolean;
        /**
          * Sets the submit button's label.
         */
        "submitLabel": string;
        /**
          * Sets the submit button's position, top right bottom or left.
         */
        "submitPos": string;
        /**
          * The type of the FLD
         */
        "type": string;
    }
    interface KupForm {
        "actions": FormActions;
        "autocompleteCallBackOnFilterUpdate": (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "cells": FormCells;
        "config": FormConfig;
        "crudCallBackOnFormActionSubmitted": (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged": (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "extra": any;
        "extraMessages": FormMessage[];
        "fields": FormFields;
        "getActualCells": () => Promise<FormCells>;
        "getOldCells": () => Promise<FormCells>;
        "refid": string;
        "searchCallBackOnFilterSubmitted": (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections": FormSection;
    }
    interface KupGauge {
        /**
          * Sets how much the arc of the gauge should be thick.
          * @namespace kup-gauge.arcThickness
          * @see kup-gauge.size
         */
        "arcThickness": number;
        /**
          * Array of three elements to specify the color of the arcs.
         */
        "colors": string[];
        /**
          * The first threshold, establishing the length of the first and second arc.
         */
        "firstThreshold"?: number;
        /**
          * The distance the label and the value has from the gauge graph.
         */
        "labelDistance": number;
        /**
          * The maximum value reachable in the current graph.
         */
        "maxValue": number;
        /**
          * A string which will be appended to the displayed values of the component.
         */
        "measurementUnit": string;
        /**
          * The minimum value reachable in the current graph.
         */
        "minValue": number;
        /**
          * if true, shows a rounded needle.
         */
        "needleCircle": boolean;
        /**
          * if true, ignore threasholds in gauge and show colored value's arc.
         */
        "onlyValue": boolean;
        /**
          * If set to true, the colors inside the colors array are used in the reversed order.
         */
        "reverseColors": boolean;
        /**
          * The second threshold, establishing the length of the second and third arc.
         */
        "secondThreshold"?: number;
        /**
          * If set to false, threshold values of the gauge are not displayed.
         */
        "showLabels": boolean;
        /**
          * If set to false, the maximum and minimum values of the gauge are not displayed.
         */
        "showMaxmin": boolean;
        /**
          * If set to false, the current value of the gauge is not displayed.
         */
        "showValue": boolean;
        /**
          * Con be used change the viewbox of the SVG. By manipulating this value, some customizations of the aspect of the gauge is achievable.
          * @namespace kup-gauge.size
          * @see kup-gauge.arcThickness
         */
        "size": number;
        /**
          * The current value of the gauge. The gauge's needle points to the percentage based on this prop.
         */
        "value": number;
        /**
          * The current size of gauge's value. Correct values are: 0,1,2 or 3.
         */
        "valueSize": number;
        /**
          * Set Width gauge.
         */
        "widthComponent": string;
    }
    interface KupGrid {
        /**
          * The number of columns displayed by the grid, the default behavior is 12.
         */
        "columns": number;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * The actual data of the grid.
         */
        "data": ComponentGridElement[];
        /**
          * When set to true, forces the width to 100% for the single line layout.
         */
        "fullWidth": boolean;
        /**
          * When set to true, forces the content on a single line.
         */
        "singleLine": boolean;
    }
    interface KupIframe {
        /**
          * Props of the button (when isButton is set to true).
         */
        "buttonData": Object;
        /**
          * The component will be rendered as a button, which opens the link associated to the iframe in another tab when clicked.
         */
        "isButton": boolean;
        /**
          * The address the iframe should be referencing to.
         */
        "src": string;
    }
    interface KupImage {
        /**
          * Sets the data of badges.
         */
        "badgeData": Badge[];
        /**
          * The color of the icon, defaults to the main color of the app.
         */
        "color": string;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * When present, the component will be drawn using CSS. Check the 'Drawing with CSS' section of the image showcase for more information.
         */
        "data": CssDraw[];
        /**
          * When set to true, a spinner will be displayed until the image finished loading. Not compatible with SVGs.
         */
        "feedback": boolean;
        /**
          * The image component will create a canvas element on which it's possible to draw. It's a temporary feature that will be fully replaced by CSS drawing in the future.
         */
        "isCanvas": boolean;
        /**
          * The resource used to fetch the image.
         */
        "resource": string;
        /**
          * The width of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeX": string;
        /**
          * The height of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeY": string;
    }
    interface KupImageButton {
        /**
          * If enabled, can select one or more images
         */
        "allowMultiSelection": boolean;
        /**
          * urls of the images
         */
        "images": any;
        /**
          * If enabled, display the image description below the image
         */
        "showDescription": boolean;
        /**
          * image dimension
         */
        "size": number;
    }
    interface KupLayout {
        /**
          * Specifies how many columns the content must be organized onto.  If this is greater than 1, then the horizontal prop will have no effect.
         */
        "columnsNumber": number;
        /**
          * By default, columns size is calculated by the grid layout and it tries to give the same space to elements.  If this is true, columns width will be calculated according to the cells content. See SCSS file for more details.
         */
        "contentBasedColumnsWidth": boolean;
        /**
          * When true, the layout and its contents will try to take all the available horizontal space.
         */
        "fillSpace": boolean;
        /**
          * Tells the layout to place all elements onto a single row. It does not work when columnsNumber is greater then 1.
         */
        "horizontal": boolean;
    }
    interface KupList {
        /**
          * Used to navigate the list when it's bound to a text field, i.e.: autocomplete.
         */
        "arrowDown": boolean;
        "arrowUp": boolean;
        /**
          * Sets a custom style for the component by feeding this string into a <style> tag.
         */
        "customStyle": string;
        /**
          * The data of the list.
         */
        "data": ComponentListElement[];
        /**
          * Selects how the items must display their label and how they can be filtered for.
         */
        "displayMode": ItemsDisplayMode;
        /**
          * Keeps string for filtering elements when filter mode is active
         */
        "filter": string;
        /**
          * Hides rows' text, ideally to display a list of icons only.
         */
        "hideText": boolean;
        /**
          * Defines whether the list is a menu or not.
         */
        "isMenu": boolean;
        /**
          * Sets the status of the menu, when false it's hidden otherwise it's visible.
         */
        "menuVisible": boolean;
        "resetFilter": (newFilter: string) => Promise<void>;
        /**
          * Defines the type of selection. Values accepted: listbox, radiogroup or group.
         */
        "roleType"?: string;
        /**
          * Defines whether items are selectable or not.
         */
        "selectable": boolean;
        /**
          * Displays the icons associated to each row when set to true.
         */
        "showIcons": boolean;
        /**
          * The list elements descriptions will be arranged in two lines.
         */
        "twoLine": boolean;
    }
    interface KupMenu {
        /**
          * When set to true, the menu will automatically close when the user clicks outside of its deactivationRelativeTo prop.
          * @see deactivationRelativeTo
         */
        "closeOnOuterClick": boolean;
        /**
          * When closeOnOuterClick is set to true, the menu will search for this element inside the event path: if found, then the menu will not be closed. Therefore, if the menu closing event comes from this element or one of its descendants, the menu will not be closed. If left to null, the component will automatically use the element provided by positionRelativeTo prop. If positionRelativeTo is not defined, it will default to the menu parent element.
          * @see closeOnOuterClick
          * @see positionRelativeTo
         */
        "deactivationRelativeTo": HTMLElement;
        /**
          * Open or closes the menu. The menu itself can edit this prop.
          * @see closeOnOuterClick
          * @see deactivationRelativeTo
         */
        "isActive": boolean;
        /**
          * Specifies how many pixels will be use to separate the menu from its positionRelativeTo element.
         */
        "margin": number;
        /**
          * The element relative to which the menu will be opened in a given position. If left to null, once, when the component menu is mounted, this prop will be automatically set to the parent HTML element.
          * @see position
         */
        "positionRelativeTo": HTMLElement;
    }
    interface KupModal {
        "header": string;
        "visible": boolean;
    }
    interface KupNavBar {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * The actual data of the nav bar.
         */
        "data": ComponentNavBarData;
        /**
          * Defines how the bar will be displayed.
         */
        "mode": ComponentNavBarMode;
    }
    interface KupPaginator {
        "currentPage": number;
        "max": number;
        "mode": PaginatorMode;
        "perPage": number;
        "selectedPerPage": number;
    }
    interface KupProgressBar {
        /**
          * Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.
         */
        "centeredLabel": boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Sets a padding between the bar and its container. Not supported for the radial variant.
         */
        "hasPadding": boolean;
        /**
          * Sets a striped background. Not supported for the radial variant.
         */
        "hasStripes": boolean;
        /**
          * Flag to show or hide the progress bar's label.
         */
        "hideLabel": boolean;
        /**
          * Specifies an icon to replace the label.
         */
        "icon": string;
        /**
          * When striped background is active, it will be animated. Not supported for the radial variant.
         */
        "isAnimated": boolean;
        /**
          * Radial version.
         */
        "isRadial": boolean;
        /**
          * Slim version.
         */
        "isSlim": boolean;
        /**
          * Specifies a text for the bar's label.
         */
        "label": string;
        /**
          * The current value the progress bar must display.
         */
        "value": number;
    }
    interface KupQlik {
        /**
          * Set Qlik App's id would you like to use How to find app id --> https://support.qlik.com/articles/000026239
         */
        "appid": string;
        /**
          * Set gird border
         */
        "bordered": boolean;
        /**
          * Set Qlik Server's connection parameters  {host:'<server host>', port:'<server port http default:80 https default:443 >', prefix:'<virtual proxy prefix dafault: blank>', isSecure:<true/false>}
         */
        "config": QlikServer;
        /**
          * Set default obj's container pixel height
         */
        "defobjsize": string;
        /**
          * Do connection to Qlik Sever, if you have more component only one must have doconnection = "true"
         */
        "doconnection": boolean;
        /**
          * Define width of grid, with true width = 100% responsive, false 1200px
         */
        "fluid": boolean;
        /**
          * Set the grid structure (JSON) selections --> Data selection array     field   --> Qlik field on which to make the selection     values  --> Array of int or string value which to select rows     colums --> they define the structure of grid       obj     --> Qlik Object id would you like to render (How to find Qlik obj id --> https://help.qlik.com/en-US/sense-developer/June2020/Subsystems/Mashups/Content/Sense_Mashups/Howtos/mashups-obtain-app-object-id.htm)       colDim  --> define column's dimension, it could have values from 1 to 10 where 10 is 100%       size    --> define size height of obj's div container, it colud have this values XS|S|M|L|XL   Example: { selections:[   {       field: 'Anno',       values:[2020]   } ], rows:[   {     columns:[         {             obj:'KvqdmD', colDim:5, size:'L'         },         {             obj:'JjSaVm', colDim:5, size:'S'         }     ]   } ] }
         */
        "grid": Array<KupQlikGrid>;
        /**
          * System prop
         */
        "qlik": any;
    }
    interface KupRadio {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * List of elements.
         */
        "data": ComponentRadioElement[];
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel": boolean;
        /**
          * Defaults at null. It's the name that binds the radio buttons together.
         */
        "name": string;
    }
    interface KupSearch {
        "data": TableData;
        "disabled": boolean;
        "extra": any;
        "initialValue": string;
        /**
          * /** Function that can be invoked when the filter is submitted, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "searchCallBackOnFilterSubmitted": (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        /**
          * When true it emits events or makes available callbacks useful to obtain and filter data. When false the data inside data prop will be used and filtered in a static way.
         */
        "serverHandledFilter": boolean;
        /**
          * The field used to obtain value
         */
        "valueField": string;
    }
    interface KupSpinner {
        /**
          * When set to true the spinner is animating.
         */
        "active": boolean;
        /**
          * Decides whether the component is a bar or a spinner.
         */
        "barVariant": boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Width and height of the spinner. For the bar variant, only height.
         */
        "dimensions": string;
        /**
          * Places a blend modal over the wrapper to darken the view (or lighten, when the theme is dark).
         */
        "fader": boolean;
        /**
          * The time required for the "fader" to trigger.
         */
        "faderTimeout": number;
        /**
          * When set to true the component will fill the whole viewport.
         */
        "fullScreen": boolean;
        /**
          * When set to true the area covered by the component will be unclickable and the cursor will be changed to "wait".
         */
        "isUnclickable": boolean;
        /**
          * Sets the layout of the spinner.
         */
        "layout": number;
    }
    interface KupSwitch {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
         */
        "checked": boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Defaults at null. When specified, its content will be shown as a label.
         */
        "label": string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel": boolean;
    }
    interface KupTabBar {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * List of elements.
         */
        "data": ComponentTabBarElement[];
    }
    interface KupTextField {
        /**
          * Imperatively sets a new value of the input.
          * @method changeValue
          * @param newValue - the new value to be set inside the input
          * @param emitEvent - If true, then also forces the component to emit an updated event
         */
        "changeValue": (newValue: string, emitEvent?: boolean) => Promise<boolean>;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * When the text field is part of the autocomplete component and the list is opened, enter key selects the item and doesn't submit.
         */
        "emitSubmitEventOnEnter": boolean;
        /**
          * Defaults at false. When set to true, the component will be focused.
         */
        "forceFocus": boolean;
        /**
          * Defaults at false. When set to true, the component will be rendered at full height.
         */
        "fullHeight": boolean;
        /**
          * Defaults at false. When set to true, the component will be rendered at full width.
         */
        "fullWidth": boolean;
        /**
          * Defaults at null. When set, its content will be shown as a help text below the field.
         */
        "helper": string;
        /**
          * Defaults at false. When set, the helper will be shown only when the field is focused.
         */
        "helperWhenFocused": boolean;
        /**
          * Defaults at null. When set, the text-field will show this icon.
         */
        "icon": string;
        /**
          * Sets the initial value of the component
         */
        "initialValue": string;
        /**
          * The HTML type of the input element. It has no effect on text areas.
         */
        "inputType": string;
        /**
          * Enables a clear trailing icon.
         */
        "isClearable": boolean;
        /**
          * Defaults at null. When set, its content will be shown as a label.
         */
        "label": string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel": boolean;
        /**
          * Defaults at null. When set, the helper will display a character counter.
         */
        "maxLength": number;
        /**
          * Defaults at false. When set to true, the component will be rendered as an outlined field.
         */
        "outlined": boolean;
        /**
          * Sets the component to read only state, making it not editable, but interactable. Used in combobox component when it behaves as a select.
         */
        "readOnly": boolean;
        /**
          * Defaults at false. When set to true, the button will be rendered with shaped edges.
         */
        "shaped": boolean;
        /**
          * Defaults at false. When set to true, the component will be rendered as a textarea.
         */
        "textArea": boolean;
        /**
          * Defaults at null. When set, the icon will be shown after the text.
         */
        "trailingIcon": boolean;
        /**
          * Defaults at false. When set to true, the label will be on the right of the component.
         */
        "trailingLabel": boolean;
    }
    interface KupTooltip {
        /**
          * Data for top section
         */
        "data": TooltipData;
        /**
          * Data for the detail
         */
        "detailData": TooltipDetailData;
        /**
          * Timeout for loadDetail
         */
        "detailDataTimeout": number;
        /**
          * Layout used to display the items
         */
        "layout": string;
    }
    interface KupTree {
        /**
          * Auto select programmatic selectic node
         */
        "autoSelectionNodeMode": boolean;
        /**
          * The columns of the tree when tree visualization is active.
         */
        "columns"?: Column[];
        /**
          * Custom style to be passed to the component.
         */
        "customStyle": string;
        /**
          * The json data used to populate the tree view: the basic, always visible tree nodes.
         */
        "data": TreeNode[];
        /**
          * The density of the rows, defaults at 'medium' and can also be set to 'dense' or 'wide'.
         */
        "density": string;
        /**
          * Function that gets invoked when a new set of nodes must be loaded as children of a node. Used in combination with showObjectNavigation.  When useDynamicExpansion is set, the tree component will have two different behaviors depending on the value of this prop. 1 - If this prop is set to null, no callback to download data is available:     the component will emit an event requiring the parent to load the children of the given node. 2 - If this prop is set to have a callback, then the component will automatically make requests to load children of     a given node. After the load has been completed, a different event will be fired to alert the parent of the change.
          * @see useDynamicExpansion
         */
        "dynamicExpansionCallback": (
        treeNodeToExpand: TreeNode,
        treeNodePath: TreeNodePath
    ) => Promise<TreeNode[]> | undefined;
        /**
          * Flag: the nodes of the whole tree must be already expanded upon loading. Disabled nodes do NOT get expanded.
         */
        "expanded": boolean;
        /**
          * Allows to set initial filter for tree nodes, manages the filter on tree nodes.
         */
        "filterValue": string;
        /**
          * Activates the scroll on hover function
         */
        "hoverScroll": boolean;
        /**
          * An array of integers containing the path to a selected child.\ Groups up the properties SelFirst, SelItem, SelName.
         */
        "selectedNode": TreeNodePath;
        /**
          * Shows the tree data as a table.
         */
        "showColumns": boolean;
        /**
          * When set to true enables the tree nodes filter.
         */
        "showFilter": boolean;
        /**
          * Flag: shows the header of the tree when the tree is displayed as a table.
          * @see showColumns
         */
        "showHeader": boolean;
        /**
          * Shows the icons of the nodes.
         */
        "showIcons": boolean;
        /**
          * When a node has options in its data and is on mouse over state while this prop is true, the node must shows the cog wheel to trigger object navigation upon click.  This will generate an event to inform the navigation object has been activated.
         */
        "showObjectNavigation": boolean;
        /**
          * When the component must use the dynamic expansion feature to open its nodes, it means that not all the nodes of the tree have been passed inside the data property.  Therefore, when expanding a node, the tree must emit an event (or run a given callback) and wait for the child nodes to be downloaded from the server.  For more information:
          * @see dynamicExpansionCallback
         */
        "useDynamicExpansion": boolean;
    }
    interface KupUpload {
        "typeOptions": UploadProps;
    }
}
declare global {
    interface HTMLKupAutocompleteElement extends Components.KupAutocomplete, HTMLStencilElement {
    }
    var HTMLKupAutocompleteElement: {
        prototype: HTMLKupAutocompleteElement;
        new (): HTMLKupAutocompleteElement;
    };
    interface HTMLKupBadgeElement extends Components.KupBadge, HTMLStencilElement {
    }
    var HTMLKupBadgeElement: {
        prototype: HTMLKupBadgeElement;
        new (): HTMLKupBadgeElement;
    };
    interface HTMLKupBoxElement extends Components.KupBox, HTMLStencilElement {
    }
    var HTMLKupBoxElement: {
        prototype: HTMLKupBoxElement;
        new (): HTMLKupBoxElement;
    };
    interface HTMLKupBtnElement extends Components.KupBtn, HTMLStencilElement {
    }
    var HTMLKupBtnElement: {
        prototype: HTMLKupBtnElement;
        new (): HTMLKupBtnElement;
    };
    interface HTMLKupButtonElement extends Components.KupButton, HTMLStencilElement {
    }
    var HTMLKupButtonElement: {
        prototype: HTMLKupButtonElement;
        new (): HTMLKupButtonElement;
    };
    interface HTMLKupCalendarElement extends Components.KupCalendar, HTMLStencilElement {
    }
    var HTMLKupCalendarElement: {
        prototype: HTMLKupCalendarElement;
        new (): HTMLKupCalendarElement;
    };
    interface HTMLKupCardElement extends Components.KupCard, HTMLStencilElement {
    }
    var HTMLKupCardElement: {
        prototype: HTMLKupCardElement;
        new (): HTMLKupCardElement;
    };
    interface HTMLKupChartElement extends Components.KupChart, HTMLStencilElement {
    }
    var HTMLKupChartElement: {
        prototype: HTMLKupChartElement;
        new (): HTMLKupChartElement;
    };
    interface HTMLKupChartCellElement extends Components.KupChartCell, HTMLStencilElement {
    }
    var HTMLKupChartCellElement: {
        prototype: HTMLKupChartCellElement;
        new (): HTMLKupChartCellElement;
    };
    interface HTMLKupCheckboxElement extends Components.KupCheckbox, HTMLStencilElement {
    }
    var HTMLKupCheckboxElement: {
        prototype: HTMLKupCheckboxElement;
        new (): HTMLKupCheckboxElement;
    };
    interface HTMLKupCheckboxMenuElement extends Components.KupCheckboxMenu, HTMLStencilElement {
    }
    var HTMLKupCheckboxMenuElement: {
        prototype: HTMLKupCheckboxMenuElement;
        new (): HTMLKupCheckboxMenuElement;
    };
    interface HTMLKupChipElement extends Components.KupChip, HTMLStencilElement {
    }
    var HTMLKupChipElement: {
        prototype: HTMLKupChipElement;
        new (): HTMLKupChipElement;
    };
    interface HTMLKupComboboxElement extends Components.KupCombobox, HTMLStencilElement {
    }
    var HTMLKupComboboxElement: {
        prototype: HTMLKupComboboxElement;
        new (): HTMLKupComboboxElement;
    };
    interface HTMLKupCrudElement extends Components.KupCrud, HTMLStencilElement {
    }
    var HTMLKupCrudElement: {
        prototype: HTMLKupCrudElement;
        new (): HTMLKupCrudElement;
    };
    interface HTMLKupDashElement extends Components.KupDash, HTMLStencilElement {
    }
    var HTMLKupDashElement: {
        prototype: HTMLKupDashElement;
        new (): HTMLKupDashElement;
    };
    interface HTMLKupDashListElement extends Components.KupDashList, HTMLStencilElement {
    }
    var HTMLKupDashListElement: {
        prototype: HTMLKupDashListElement;
        new (): HTMLKupDashListElement;
    };
    interface HTMLKupDataTableElement extends Components.KupDataTable, HTMLStencilElement {
    }
    var HTMLKupDataTableElement: {
        prototype: HTMLKupDataTableElement;
        new (): HTMLKupDataTableElement;
    };
    interface HTMLKupEditorElement extends Components.KupEditor, HTMLStencilElement {
    }
    var HTMLKupEditorElement: {
        prototype: HTMLKupEditorElement;
        new (): HTMLKupEditorElement;
    };
    interface HTMLKupFieldElement extends Components.KupField, HTMLStencilElement {
    }
    var HTMLKupFieldElement: {
        prototype: HTMLKupFieldElement;
        new (): HTMLKupFieldElement;
    };
    interface HTMLKupFormElement extends Components.KupForm, HTMLStencilElement {
    }
    var HTMLKupFormElement: {
        prototype: HTMLKupFormElement;
        new (): HTMLKupFormElement;
    };
    interface HTMLKupGaugeElement extends Components.KupGauge, HTMLStencilElement {
    }
    var HTMLKupGaugeElement: {
        prototype: HTMLKupGaugeElement;
        new (): HTMLKupGaugeElement;
    };
    interface HTMLKupGridElement extends Components.KupGrid, HTMLStencilElement {
    }
    var HTMLKupGridElement: {
        prototype: HTMLKupGridElement;
        new (): HTMLKupGridElement;
    };
    interface HTMLKupIframeElement extends Components.KupIframe, HTMLStencilElement {
    }
    var HTMLKupIframeElement: {
        prototype: HTMLKupIframeElement;
        new (): HTMLKupIframeElement;
    };
    interface HTMLKupImageElement extends Components.KupImage, HTMLStencilElement {
    }
    var HTMLKupImageElement: {
        prototype: HTMLKupImageElement;
        new (): HTMLKupImageElement;
    };
    interface HTMLKupImageButtonElement extends Components.KupImageButton, HTMLStencilElement {
    }
    var HTMLKupImageButtonElement: {
        prototype: HTMLKupImageButtonElement;
        new (): HTMLKupImageButtonElement;
    };
    interface HTMLKupLayoutElement extends Components.KupLayout, HTMLStencilElement {
    }
    var HTMLKupLayoutElement: {
        prototype: HTMLKupLayoutElement;
        new (): HTMLKupLayoutElement;
    };
    interface HTMLKupListElement extends Components.KupList, HTMLStencilElement {
    }
    var HTMLKupListElement: {
        prototype: HTMLKupListElement;
        new (): HTMLKupListElement;
    };
    interface HTMLKupMenuElement extends Components.KupMenu, HTMLStencilElement {
    }
    var HTMLKupMenuElement: {
        prototype: HTMLKupMenuElement;
        new (): HTMLKupMenuElement;
    };
    interface HTMLKupModalElement extends Components.KupModal, HTMLStencilElement {
    }
    var HTMLKupModalElement: {
        prototype: HTMLKupModalElement;
        new (): HTMLKupModalElement;
    };
    interface HTMLKupNavBarElement extends Components.KupNavBar, HTMLStencilElement {
    }
    var HTMLKupNavBarElement: {
        prototype: HTMLKupNavBarElement;
        new (): HTMLKupNavBarElement;
    };
    interface HTMLKupPaginatorElement extends Components.KupPaginator, HTMLStencilElement {
    }
    var HTMLKupPaginatorElement: {
        prototype: HTMLKupPaginatorElement;
        new (): HTMLKupPaginatorElement;
    };
    interface HTMLKupProgressBarElement extends Components.KupProgressBar, HTMLStencilElement {
    }
    var HTMLKupProgressBarElement: {
        prototype: HTMLKupProgressBarElement;
        new (): HTMLKupProgressBarElement;
    };
    interface HTMLKupQlikElement extends Components.KupQlik, HTMLStencilElement {
    }
    var HTMLKupQlikElement: {
        prototype: HTMLKupQlikElement;
        new (): HTMLKupQlikElement;
    };
    interface HTMLKupRadioElement extends Components.KupRadio, HTMLStencilElement {
    }
    var HTMLKupRadioElement: {
        prototype: HTMLKupRadioElement;
        new (): HTMLKupRadioElement;
    };
    interface HTMLKupSearchElement extends Components.KupSearch, HTMLStencilElement {
    }
    var HTMLKupSearchElement: {
        prototype: HTMLKupSearchElement;
        new (): HTMLKupSearchElement;
    };
    interface HTMLKupSpinnerElement extends Components.KupSpinner, HTMLStencilElement {
    }
    var HTMLKupSpinnerElement: {
        prototype: HTMLKupSpinnerElement;
        new (): HTMLKupSpinnerElement;
    };
    interface HTMLKupSwitchElement extends Components.KupSwitch, HTMLStencilElement {
    }
    var HTMLKupSwitchElement: {
        prototype: HTMLKupSwitchElement;
        new (): HTMLKupSwitchElement;
    };
    interface HTMLKupTabBarElement extends Components.KupTabBar, HTMLStencilElement {
    }
    var HTMLKupTabBarElement: {
        prototype: HTMLKupTabBarElement;
        new (): HTMLKupTabBarElement;
    };
    interface HTMLKupTextFieldElement extends Components.KupTextField, HTMLStencilElement {
    }
    var HTMLKupTextFieldElement: {
        prototype: HTMLKupTextFieldElement;
        new (): HTMLKupTextFieldElement;
    };
    interface HTMLKupTooltipElement extends Components.KupTooltip, HTMLStencilElement {
    }
    var HTMLKupTooltipElement: {
        prototype: HTMLKupTooltipElement;
        new (): HTMLKupTooltipElement;
    };
    interface HTMLKupTreeElement extends Components.KupTree, HTMLStencilElement {
    }
    var HTMLKupTreeElement: {
        prototype: HTMLKupTreeElement;
        new (): HTMLKupTreeElement;
    };
    interface HTMLKupUploadElement extends Components.KupUpload, HTMLStencilElement {
    }
    var HTMLKupUploadElement: {
        prototype: HTMLKupUploadElement;
        new (): HTMLKupUploadElement;
    };
    interface HTMLElementTagNameMap {
        "kup-autocomplete": HTMLKupAutocompleteElement;
        "kup-badge": HTMLKupBadgeElement;
        "kup-box": HTMLKupBoxElement;
        "kup-btn": HTMLKupBtnElement;
        "kup-button": HTMLKupButtonElement;
        "kup-calendar": HTMLKupCalendarElement;
        "kup-card": HTMLKupCardElement;
        "kup-chart": HTMLKupChartElement;
        "kup-chart-cell": HTMLKupChartCellElement;
        "kup-checkbox": HTMLKupCheckboxElement;
        "kup-checkbox-menu": HTMLKupCheckboxMenuElement;
        "kup-chip": HTMLKupChipElement;
        "kup-combobox": HTMLKupComboboxElement;
        "kup-crud": HTMLKupCrudElement;
        "kup-dash": HTMLKupDashElement;
        "kup-dash-list": HTMLKupDashListElement;
        "kup-data-table": HTMLKupDataTableElement;
        "kup-editor": HTMLKupEditorElement;
        "kup-field": HTMLKupFieldElement;
        "kup-form": HTMLKupFormElement;
        "kup-gauge": HTMLKupGaugeElement;
        "kup-grid": HTMLKupGridElement;
        "kup-iframe": HTMLKupIframeElement;
        "kup-image": HTMLKupImageElement;
        "kup-image-button": HTMLKupImageButtonElement;
        "kup-layout": HTMLKupLayoutElement;
        "kup-list": HTMLKupListElement;
        "kup-menu": HTMLKupMenuElement;
        "kup-modal": HTMLKupModalElement;
        "kup-nav-bar": HTMLKupNavBarElement;
        "kup-paginator": HTMLKupPaginatorElement;
        "kup-progress-bar": HTMLKupProgressBarElement;
        "kup-qlik": HTMLKupQlikElement;
        "kup-radio": HTMLKupRadioElement;
        "kup-search": HTMLKupSearchElement;
        "kup-spinner": HTMLKupSpinnerElement;
        "kup-switch": HTMLKupSwitchElement;
        "kup-tab-bar": HTMLKupTabBarElement;
        "kup-text-field": HTMLKupTextFieldElement;
        "kup-tooltip": HTMLKupTooltipElement;
        "kup-tree": HTMLKupTreeElement;
        "kup-upload": HTMLKupUploadElement;
    }
}
declare namespace LocalJSX {
    interface KupAutocomplete {
        /**
          * Function that can be invoked when the filter is updated, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "callBackOnFilterUpdate"?: (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Props of the list.
         */
        "listData"?: Object;
        /**
          * The minimum number of chars to trigger the autocomplete
         */
        "minimumChars"?: number;
        /**
          * Event example.
         */
        "onKupAutocompleteBlur"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupAutocompleteChange"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupAutocompleteClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupAutocompleteFilterChanged"?: (event: CustomEvent<{
        filter: string;
        matchesMinimumCharsRequired: boolean;
    }>) => void;
        "onKupAutocompleteFocus"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupAutocompleteIconClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupAutocompleteInput"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupAutocompleteItemClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        /**
          * Sets how the return the selected item value
         */
        "selectMode"?: ItemsDisplayMode;
        /**
          * When true, it will emit events to inform the listener of the change of the current filter value. Also the component builtin filter will be disabled.
         */
        "serverHandledFilter"?: boolean;
        /**
          * Props of the text field.
         */
        "textfieldData"?: Object;
    }
    interface KupBadge {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * The data of the image displayed inside the badge.
         */
        "imageData"?: {};
        "onKupBadgeClick"?: (event: CustomEvent<{
        el: EventTarget;
    }>) => void;
        /**
          * The position of the badge relative to its parent. Supported values: "TL" (top left), "TR" (top right), "BL" (bottom left), "BR" (bottom left).
         */
        "position"?: BadgePosition;
        /**
          * The text displayed inside the badge.
         */
        "text"?: string;
    }
    interface KupBox {
        /**
          * Number of columns
         */
        "cardData"?: ComponentCardElement;
        /**
          * Number of columns
         */
        "columns"?: number;
        /**
          * Alignment of the content. Can be set to left, right or center.
         */
        "contentAlign"?: string;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Data
         */
        "data"?: { columns?: Column[]; rows?: BoxRow[] };
        /**
          * Enable dragging
         */
        "dragEnabled"?: boolean;
        /**
          * Enable dropping
         */
        "dropEnabled"?: boolean;
        /**
          * Drop can be done in section
         */
        "dropOnSection"?: false;
        /**
          * If enabled, a button to load / display the row actions will be displayed on the right of every box
         */
        "enableRowActions"?: boolean;
        /**
          * Enable filtering
         */
        "filterEnabled"?: boolean;
        /**
          * How the field will be displayed. If not present, a default one will be created.
         */
        "layout"?: Layout;
        /**
          * Enable multi selection
         */
        "multiSelection"?: boolean;
        /**
          * Removes border
         */
        "noBorder"?: boolean;
        /**
          * Removes padding
         */
        "noPadding"?: boolean;
        /**
          * Triggered when a box is auto selected via selectBox prop
         */
        "onKupAutoBoxSelect"?: (event: CustomEvent<{
        row: BoxRow;
    }>) => void;
        /**
          * Triggered when a box is clicked
         */
        "onKupBoxClicked"?: (event: CustomEvent<{
        row: BoxRow;
        column?: string;
    }>) => void;
        /**
          * Triggered when a box dragging is ended
         */
        "onKupBoxDragEnded"?: (event: CustomEvent<{
        fromId: string;
        fromRow: BoxRow;
        fromSelectedRows?: BoxRow[];
    }>) => void;
        /**
          * Triggered when a box dragging is started
         */
        "onKupBoxDragStarted"?: (event: CustomEvent<{
        fromId: string;
        fromRow: BoxRow;
        fromSelectedRows?: BoxRow[];
    }>) => void;
        /**
          * Triggered when a box is dropped
         */
        "onKupBoxDropped"?: (event: CustomEvent<{
        fromId: string;
        fromRow: BoxRow;
        fromSelectedRows?: BoxRow[];
        toId: string;
        toRow: BoxRow;
        toSelectedRows?: BoxRow[];
    }>) => void;
        /**
          * Triggered when the multi selection checkbox changes value
         */
        "onKupBoxSelected"?: (event: CustomEvent<{
        rows: BoxRow[];
    }>) => void;
        /**
          * When the row menu action icon is clicked
         */
        "onKupRowActionClicked"?: (event: CustomEvent<{
        row: BoxRow;
        action: RowAction;
        index: number;
    }>) => void;
        /**
          * When the row menu action icon is clicked
         */
        "onKupRowActionMenuClicked"?: (event: CustomEvent<{
        row: BoxRow;
    }>) => void;
        /**
          * Number of boxes per page
         */
        "pageSize"?: number;
        /**
          * Enables pagination
         */
        "pagination"?: boolean;
        /**
          * Automatically selects the box at the specified index
         */
        "selectBox"?: number;
        /**
          * If enabled, highlights the selected box/boxes
         */
        "showSelection"?: boolean;
        /**
          * If sorting is enabled, specifies which column to sort
         */
        "sortBy"?: string;
        /**
          * Enable sorting
         */
        "sortEnabled"?: boolean;
    }
    interface KupBtn {
        "buttons"?: any[];
        "config"?: ButtonConfig;
        "onKupBtnClick"?: (event: CustomEvent<{
        id: number;
    }>) => void;
    }
    interface KupButton {
        /**
          * Defaults at false. When set to true, the icon button state will be on.
         */
        "checked"?: boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Defaults at false. When set to true, the button will be rendered flat.
         */
        "flat"?: boolean;
        /**
          * Defaults at false. When set to true fill all the available horizontal space.
         */
        "fullHeight"?: boolean;
        /**
          * Defaults at false. When set to true fill all the available horizontal space.
         */
        "fullWidth"?: boolean;
        /**
          * Defaults at null. When set, the button will show this icon.
         */
        "icon"?: string;
        /**
          * If not set, it will be managed by the component.
         */
        "iconColor"?: string;
        /**
          * Defaults at null. When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
         */
        "iconOff"?: string;
        /**
          * Defaults at null. When set, the button will show this text.
         */
        "label"?: string;
        "onKupButtonBlur"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        "onKupButtonClick"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        "onKupButtonFocus"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        /**
          * Defaults at false. When set to true, the button will be rendered with a colored outline.
         */
        "outlined"?: boolean;
        /**
          * Defaults at false. When set to true, the button will be rendered with rounded edges.
         */
        "shaped"?: boolean;
        /**
          * Defaults at false. When set to true, the icon button will be toggable on/off.
         */
        "toggable"?: boolean;
        /**
          * When set, this tooltip will be displayed on mouse over (using the HTML attribute title).
         */
        "tooltip"?: string;
        /**
          * Defaults at null. When set, the icon will be shown after the text.
         */
        "trailingIcon"?: boolean;
    }
    interface KupCalendar {
        "data"?: DataTable;
        "dateCol"?: string;
        "descrCol"?: string;
        "endCol"?: string;
        "hideNavigation"?: boolean;
        "iconCol"?: string;
        "imageCol"?: string;
        "initialDate"?: string;
        /**
          * When a date is clicked
         */
        "onKupCalendarDateClicked"?: (event: CustomEvent<Date>) => void;
        /**
          * When an event is clicked
         */
        "onKupCalendarEventClicked"?: (event: CustomEvent<Row>) => void;
        /**
          * When a date is dropped
         */
        "onKupCalendarEventDropped"?: (event: CustomEvent<{
        fromDate: {
            start: Date;
            end: Date;
        };
        toDate: {
            start: Date;
            end: Date;
        };
    }>) => void;
        /**
          * When the navigation change
         */
        "onKupCalendarViewChanged"?: (event: CustomEvent<{
        from: Date;
        to: Date;
    }>) => void;
        "startCol"?: string;
        "styleCol"?: string;
        "weekView"?: boolean;
    }
    interface KupCard {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * The actual data of the card.
         */
        "data"?: ComponentCardElement;
        /**
          * Defines whether the card is a menu or not.
         */
        "isMenu"?: boolean;
        /**
          * Sets the type of the card. Currently supported values: "material", "custom", "collapsible".
         */
        "layoutFamily"?: string;
        /**
          * Sets the number of the layout.
         */
        "layoutNumber"?: number;
        /**
          * Sets the status of the menu, when false it's hidden otherwise it's visible.
         */
        "menuVisible"?: boolean;
        "onKupCardClick"?: (event: CustomEvent<{
        id: any;
    }>) => void;
        "onKupCardEvent"?: (event: CustomEvent<{
        id: any;
        value: any;
        event: any;
    }>) => void;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeX"?: string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeY"?: string;
    }
    interface KupChart {
        "asp"?: ChartAspect;
        "axis"?: string;
        "colors"?: string[];
        "data"?: DataTable;
        "graphTitle"?: string;
        "graphTitleColor"?: string;
        "graphTitleSize"?: number;
        "hAxis"?: ChartAxis;
        "height"?: number;
        "legend"?: boolean;
        /**
          * Triggered when a chart serie is clicked
         */
        "onKupChartClicked"?: (event: CustomEvent<ChartClickedEvent>) => void;
        "series"?: string[];
        "showMarks"?: boolean;
        "stacked"?: boolean;
        "types"?: ChartType[];
        "vAxis"?: ChartAxis;
        /**
          * Google chart version to load
         */
        "version"?: string;
        "width"?: number;
    }
    interface KupChartCell {
        "cellConfig"?: any;
        "value"?: string;
    }
    interface KupCheckbox {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
         */
        "checked"?: boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Defaults at false. When set to true, the component will be set to 'indeterminate'.
         */
        "indeterminate"?: boolean;
        /**
          * Defaults at null. When specified, its content will be shown as a label.
         */
        "label"?: string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel"?: boolean;
        "onKupCheckboxBlur"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupCheckboxChange"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupCheckboxClick"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupCheckboxFocus"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupCheckboxInput"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
    }
    interface KupCheckboxMenu {
        /**
          * Sets if the checkbox menu should be disabled
         */
        "disabled"?: boolean;
        /**
          * Chooses which field of an item object should be used to create the list and be filtered.
         */
        "displayedField"?: string;
        /**
          * The label to show as a placeholder inside the filter input
         */
        "filterLabel"?: string;
        /**
          * Marks the field as filterable, allowing an input text to filter the options
         */
        "isFilterable"?: boolean;
        /**
          * Sets the checkbox to be disabled  Must have reflect into the attribute
         */
        "items"?: KupCheckboxMenuItem[];
        /**
          * The label to set to the component
         */
        "label"?: string;
        /**
          * Fired when the checkbox input changes its value
         */
        "onKupCheckboxMenuSelected"?: (event: CustomEvent<KupCheckboxMenuItem[]>) => void;
        /**
          * Chooses which field of an item object should be used to create the list and be filtered.
         */
        "valueField"?: string;
    }
    interface KupChip {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * List of elements.
         */
        "data"?: ComponentChipElement[];
        "onKupChipBlur"?: (event: CustomEvent<{
        id: string;
        index: number;
        value: string;
    }>) => void;
        "onKupChipClick"?: (event: CustomEvent<{
        id: string;
        index: number;
        value: string;
    }>) => void;
        "onKupChipFocus"?: (event: CustomEvent<{
        id: string;
        index: number;
        value: string;
    }>) => void;
        "onKupChipIconClick"?: (event: CustomEvent<{
        id: string;
        index: number;
        value: string;
    }>) => void;
        /**
          * The type of chip. Available types: input, filter, choice or empty for default.
         */
        "type"?: string;
    }
    interface KupCombobox {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Lets the combobox behave as a select element.
         */
        "isSelect"?: boolean;
        /**
          * Props of the list.
         */
        "listData"?: Object;
        /**
          * Event example.
         */
        "onKupComboboxBlur"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxChange"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxFocus"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxIconClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxInput"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxItemClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxTextFieldSubmit"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        /**
          * Sets how the return the elected item value. Suported values: "code", "description", "both".
         */
        "selectMode"?: ItemsDisplayMode;
        /**
          * Props of the text field.
         */
        "textfieldData"?: Object;
    }
    interface KupCrud {
        "actions"?: FormActions;
        "autocompleteCallBackOnFilterUpdate"?: (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "config"?: CrudConfig;
        "crudCallBackOnFormActionSubmitted"?: (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged"?: (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "disabled"?: boolean;
        "extra"?: any;
        "extraMessages"?: FormMessage[];
        "fields"?: FormFields;
        "onKupCrudBlurred"?: (event: CustomEvent<any>) => void;
        "onKupCrudFocused"?: (event: CustomEvent<any>) => void;
        "onKupCrudFormActionSubmitted"?: (event: CustomEvent<FormActionEventDetail>) => void;
        "onKupCrudFormFieldChanged"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "onKupCrudRecordsChanged"?: (event: CustomEvent<CrudRecordsChanged>) => void;
        "records"?: CrudRecord[];
        "refid"?: string;
        "searchCallBackOnFilterSubmitted"?: (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections"?: FormSection;
    }
    interface KupDash {
        "active"?: boolean;
        "fontsize"?: string;
        "index"?: number;
        "layout"?: string;
        "onKetchupDashClicked"?: (event: CustomEvent<{
        id: number;
    }>) => void;
    }
    interface KupDashList {
        "active"?: boolean;
        "columnsNumber"?: number;
        "data"?: TableData;
        "fontsize"?: string;
        "fullWidth"?: boolean;
        "horizontal"?: boolean;
        "iconColor"?: Array<any>;
        "layout"?: string;
        "onKetchupDashClicked"?: (event: CustomEvent<{
        idx: number;
    }>) => void;
        "textColor"?: Array<any>;
        "valueColor"?: Array<any>;
    }
    interface KupDataTable {
        /**
          * The data of the table.
         */
        "data"?: TableData;
        /**
          * The density of the rows, defaults at 'medium' and can be also set to 'large' or 'small'.
         */
        "density"?: string;
        /**
          * Enables the sorting of columns by dragging them into different columns.
         */
        "enableSortableColumns"?: boolean;
        /**
          * Expands groups when set to true.
         */
        "expandGroups"?: boolean;
        /**
          * List of filters set by the user.
         */
        "filters"?: GenericFilter;
        /**
          * Fixes the given number of columns so that they stay visible when horizontally scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedRows.
          * @see fixedRows
         */
        "fixedColumns"?: number;
        /**
          * Fixes the given number of rows so that they stay visible when vertically scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedColumns.
          * @see fixedColumns
         */
        "fixedRows"?: number;
        /**
          * Forces cells with long text and a fixed column size to have an ellipsis set on their text. The reflect attribute is mandatory to allow styling.
         */
        "forceOneLine"?: boolean;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter"?: boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue"?: string;
        /**
          * How the label of a group must be displayed. For available values [see here]{@link GroupLabelDisplayMode}
         */
        "groupLabelDisplay"?: GroupLabelDisplayMode;
        /**
          * The list of groups.
         */
        "groups"?: Array<GroupObject>;
        /**
          * When set to true the header will stick on top of the table when scrolling.
         */
        "headerIsPersistent"?: boolean;
        /**
          * Defines the placeholder character which will be replaced by a line break inside table header cells, normal or sticky.
         */
        "lineBreakCharacter"?: string;
        /**
          * Sets a maximum limit of new records which can be required by the load more functionality.
         */
        "loadMoreLimit"?: number;
        /**
          * Establish the modality of how many new records will be downloaded.  This property is regulated also by loadMoreStep.
          * @see loadMoreStep
          * @see loadMoreLimit
         */
        "loadMoreMode"?: LoadMoreMode;
        /**
          * The number of records which will be requested to be downloaded when clicking on the load more button.  This property is regulated also by loadMoreMode.
          * @see loadMoreMode
          * @see loadMoreLimit
         */
        "loadMoreStep"?: number;
        /**
          * When set to true enables rows multi selection.
         */
        "multiSelection"?: boolean;
        /**
          * When 'add column' menu item is clicked
         */
        "onKupAddColumn"?: (event: CustomEvent<{ column: string }>) => void;
        /**
          * When a row is auto selected via selectRow prop
         */
        "onKupAutoRowSelect"?: (event: CustomEvent<{
        selectedRow: Row;
    }>) => void;
        "onKupCellButtonClicked"?: (event: CustomEvent<KupDataTableCellButtonClick>) => void;
        "onKupDataTableSortedColumn"?: (event: CustomEvent<KupDataTableSortedColumnIndexes>) => void;
        /**
          * When a tooltip request detail data
         */
        "onKupDetailRequest"?: (event: CustomEvent<{
        cell: Cell;
        tooltip: EventTarget;
    }>) => void;
        "onKupLoadMoreClicked"?: (event: CustomEvent<{
        loadItems: number;
    }>) => void;
        /**
          * When a tooltip request initial data
         */
        "onKupLoadRequest"?: (event: CustomEvent<{
        cell: Cell;
        tooltip: EventTarget;
    }>) => void;
        /**
          * When cell option is clicked
         */
        "onKupOptionClicked"?: (event: CustomEvent<{
        column: string;
        row: Row;
    }>) => void;
        /**
          * When a row action is clicked
         */
        "onKupRowActionClicked"?: (event: CustomEvent<{
        type: 'default' | 'variable' | 'expander';
        row: Row;
        action?: RowAction;
        index?: number;
    }>) => void;
        /**
          * When a row is selected
         */
        "onKupRowSelected"?: (event: CustomEvent<{
        selectedRows: Array<Row>;
        clickedColumn: string;
    }>) => void;
        /**
          * Sets the position of the paginator. Available positions: top, bottom or both.
         */
        "paginatorPos"?: PaginatorPos;
        /**
          * Sets the actions of the rows.
         */
        "rowActions"?: Array<RowAction>;
        /**
          * Sets the number of rows per page to display.
         */
        "rowsPerPage"?: number;
        /**
          * Selects the specified row.
         */
        "selectRow"?: number;
        /**
          * When set to true enables the column filters.
         */
        "showFilters"?: boolean;
        /**
          * Can be used to customize the grid view of the table.
         */
        "showGrid"?: ShowGrid;
        /**
          * Enables rendering of the table header.
          * @namespace KupDataTable.showHeader
         */
        "showHeader"?: boolean;
        /**
          * If set to true, displays the button to load more records.
         */
        "showLoadMore"?: boolean;
        /**
          * Defines the current sorting options.
         */
        "sort"?: Array<SortObject>;
        /**
          * When set to true enables the sorting of the columns.
         */
        "sortEnabled"?: boolean;
        /**
          * If set to true, when a column is dragged to be sorted, the component directly mutates the data.columns property and then fires the event
         */
        "sortableColumnsMutateData"?: boolean;
        /**
          * Sets the height of the table.
         */
        "tableHeight"?: string;
        /**
          * Sets the width of the table.
         */
        "tableWidth"?: string;
        /**
          * Defines the current totals options.
         */
        "totals"?: TotalsMap;
    }
    interface KupEditor {
        /**
          * The html to be rendered and edited
         */
        "text"?: string;
    }
    interface KupField {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Effective data to pass to the component.
         */
        "data"?: Object;
        /**
          * The text of the label. If set to empty or has only white space chars, the label will be removed.
         */
        "label"?: string;
        /**
          * Sets the label's position, left right or top.
         */
        "labelPos"?: string;
        /**
          * Launched when the value of the current FLD changes.
         */
        "onKupFldChange"?: (event: CustomEvent<KupFldChangeEvent>) => void;
        /**
          * Launched when the FLD values are confirmed and a submit event is triggered.
         */
        "onKupFldSubmit"?: (event: CustomEvent<KupFldSubmitEvent>) => void;
        /**
          * Sets whether the submit button must be displayed or not.
         */
        "showSubmit"?: boolean;
        /**
          * Sets the submit button's label.
         */
        "submitLabel"?: string;
        /**
          * Sets the submit button's position, top right bottom or left.
         */
        "submitPos"?: string;
        /**
          * The type of the FLD
         */
        "type"?: string;
    }
    interface KupForm {
        "actions"?: FormActions;
        "autocompleteCallBackOnFilterUpdate"?: (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "cells"?: FormCells;
        "config"?: FormConfig;
        "crudCallBackOnFormActionSubmitted"?: (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged"?: (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "extra"?: any;
        "extraMessages"?: FormMessage[];
        "fields"?: FormFields;
        "onKupFormActionSubmitted"?: (event: CustomEvent<FormActionEventDetail>) => void;
        "onKupFormFieldBlurred"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "onKupFormFieldChanged"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "onKupFormFieldFocused"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "refid"?: string;
        "searchCallBackOnFilterSubmitted"?: (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections"?: FormSection;
    }
    interface KupGauge {
        /**
          * Sets how much the arc of the gauge should be thick.
          * @namespace kup-gauge.arcThickness
          * @see kup-gauge.size
         */
        "arcThickness"?: number;
        /**
          * Array of three elements to specify the color of the arcs.
         */
        "colors"?: string[];
        /**
          * The first threshold, establishing the length of the first and second arc.
         */
        "firstThreshold"?: number;
        /**
          * The distance the label and the value has from the gauge graph.
         */
        "labelDistance"?: number;
        /**
          * The maximum value reachable in the current graph.
         */
        "maxValue"?: number;
        /**
          * A string which will be appended to the displayed values of the component.
         */
        "measurementUnit"?: string;
        /**
          * The minimum value reachable in the current graph.
         */
        "minValue"?: number;
        /**
          * if true, shows a rounded needle.
         */
        "needleCircle"?: boolean;
        /**
          * if true, ignore threasholds in gauge and show colored value's arc.
         */
        "onlyValue"?: boolean;
        /**
          * If set to true, the colors inside the colors array are used in the reversed order.
         */
        "reverseColors"?: boolean;
        /**
          * The second threshold, establishing the length of the second and third arc.
         */
        "secondThreshold"?: number;
        /**
          * If set to false, threshold values of the gauge are not displayed.
         */
        "showLabels"?: boolean;
        /**
          * If set to false, the maximum and minimum values of the gauge are not displayed.
         */
        "showMaxmin"?: boolean;
        /**
          * If set to false, the current value of the gauge is not displayed.
         */
        "showValue"?: boolean;
        /**
          * Con be used change the viewbox of the SVG. By manipulating this value, some customizations of the aspect of the gauge is achievable.
          * @namespace kup-gauge.size
          * @see kup-gauge.arcThickness
         */
        "size"?: number;
        /**
          * The current value of the gauge. The gauge's needle points to the percentage based on this prop.
         */
        "value"?: number;
        /**
          * The current size of gauge's value. Correct values are: 0,1,2 or 3.
         */
        "valueSize"?: number;
        /**
          * Set Width gauge.
         */
        "widthComponent"?: string;
    }
    interface KupGrid {
        /**
          * The number of columns displayed by the grid, the default behavior is 12.
         */
        "columns"?: number;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * The actual data of the grid.
         */
        "data"?: ComponentGridElement[];
        /**
          * When set to true, forces the width to 100% for the single line layout.
         */
        "fullWidth"?: boolean;
        /**
          * When set to true, forces the content on a single line.
         */
        "singleLine"?: boolean;
    }
    interface KupIframe {
        /**
          * Props of the button (when isButton is set to true).
         */
        "buttonData"?: Object;
        /**
          * The component will be rendered as a button, which opens the link associated to the iframe in another tab when clicked.
         */
        "isButton"?: boolean;
        "onKupIframeError"?: (event: CustomEvent<any>) => void;
        "onKupIframeLoad"?: (event: CustomEvent<any>) => void;
        /**
          * The address the iframe should be referencing to.
         */
        "src"?: string;
    }
    interface KupImage {
        /**
          * Sets the data of badges.
         */
        "badgeData"?: Badge[];
        /**
          * The color of the icon, defaults to the main color of the app.
         */
        "color"?: string;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * When present, the component will be drawn using CSS. Check the 'Drawing with CSS' section of the image showcase for more information.
         */
        "data"?: CssDraw[];
        /**
          * When set to true, a spinner will be displayed until the image finished loading. Not compatible with SVGs.
         */
        "feedback"?: boolean;
        /**
          * The image component will create a canvas element on which it's possible to draw. It's a temporary feature that will be fully replaced by CSS drawing in the future.
         */
        "isCanvas"?: boolean;
        "onKupImageClick"?: (event: CustomEvent<{
        el: EventTarget;
    }>) => void;
        "onKupImageLoad"?: (event: CustomEvent<{
        el: EventTarget;
    }>) => void;
        /**
          * The resource used to fetch the image.
         */
        "resource"?: string;
        /**
          * The width of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeX"?: string;
        /**
          * The height of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeY"?: string;
    }
    interface KupImageButton {
        /**
          * If enabled, can select one or more images
         */
        "allowMultiSelection"?: boolean;
        /**
          * urls of the images
         */
        "images"?: any;
        "onKupImageButtonSelected"?: (event: CustomEvent<{
        selectedImages: [];
    }>) => void;
        /**
          * If enabled, display the image description below the image
         */
        "showDescription"?: boolean;
        /**
          * image dimension
         */
        "size"?: number;
    }
    interface KupLayout {
        /**
          * Specifies how many columns the content must be organized onto.  If this is greater than 1, then the horizontal prop will have no effect.
         */
        "columnsNumber"?: number;
        /**
          * By default, columns size is calculated by the grid layout and it tries to give the same space to elements.  If this is true, columns width will be calculated according to the cells content. See SCSS file for more details.
         */
        "contentBasedColumnsWidth"?: boolean;
        /**
          * When true, the layout and its contents will try to take all the available horizontal space.
         */
        "fillSpace"?: boolean;
        /**
          * Tells the layout to place all elements onto a single row. It does not work when columnsNumber is greater then 1.
         */
        "horizontal"?: boolean;
    }
    interface KupList {
        /**
          * Used to navigate the list when it's bound to a text field, i.e.: autocomplete.
         */
        "arrowDown"?: boolean;
        "arrowUp"?: boolean;
        /**
          * Sets a custom style for the component by feeding this string into a <style> tag.
         */
        "customStyle"?: string;
        /**
          * The data of the list.
         */
        "data"?: ComponentListElement[];
        /**
          * Selects how the items must display their label and how they can be filtered for.
         */
        "displayMode"?: ItemsDisplayMode;
        /**
          * Keeps string for filtering elements when filter mode is active
         */
        "filter"?: string;
        /**
          * Hides rows' text, ideally to display a list of icons only.
         */
        "hideText"?: boolean;
        /**
          * Defines whether the list is a menu or not.
         */
        "isMenu"?: boolean;
        /**
          * Sets the status of the menu, when false it's hidden otherwise it's visible.
         */
        "menuVisible"?: boolean;
        /**
          * Events.
         */
        "onKupListBlur"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        "onKupListChange"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        "onKupListClick"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        "onKupListFocus"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        "onKupListInput"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        /**
          * Defines the type of selection. Values accepted: listbox, radiogroup or group.
         */
        "roleType"?: string;
        /**
          * Defines whether items are selectable or not.
         */
        "selectable"?: boolean;
        /**
          * Displays the icons associated to each row when set to true.
         */
        "showIcons"?: boolean;
        /**
          * The list elements descriptions will be arranged in two lines.
         */
        "twoLine"?: boolean;
    }
    interface KupMenu {
        /**
          * When set to true, the menu will automatically close when the user clicks outside of its deactivationRelativeTo prop.
          * @see deactivationRelativeTo
         */
        "closeOnOuterClick"?: boolean;
        /**
          * When closeOnOuterClick is set to true, the menu will search for this element inside the event path: if found, then the menu will not be closed. Therefore, if the menu closing event comes from this element or one of its descendants, the menu will not be closed. If left to null, the component will automatically use the element provided by positionRelativeTo prop. If positionRelativeTo is not defined, it will default to the menu parent element.
          * @see closeOnOuterClick
          * @see positionRelativeTo
         */
        "deactivationRelativeTo"?: HTMLElement;
        /**
          * Open or closes the menu. The menu itself can edit this prop.
          * @see closeOnOuterClick
          * @see deactivationRelativeTo
         */
        "isActive"?: boolean;
        /**
          * Specifies how many pixels will be use to separate the menu from its positionRelativeTo element.
         */
        "margin"?: number;
        /**
          * When the menu gets closed.
         */
        "onKupMenuClose"?: (event: CustomEvent<void>) => void;
        /**
          * The element relative to which the menu will be opened in a given position. If left to null, once, when the component menu is mounted, this prop will be automatically set to the parent HTML element.
          * @see position
         */
        "positionRelativeTo"?: HTMLElement;
    }
    interface KupModal {
        "header"?: string;
        "onKupModalCancel"?: (event: CustomEvent<any>) => void;
        "visible"?: boolean;
    }
    interface KupNavBar {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * The actual data of the nav bar.
         */
        "data"?: ComponentNavBarData;
        /**
          * Defines how the bar will be displayed.
         */
        "mode"?: ComponentNavBarMode;
        "onKupNavbarMenuItemClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupNavbarOptionItemClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
    }
    interface KupPaginator {
        "currentPage"?: number;
        "max"?: number;
        "mode"?: PaginatorMode;
        /**
          * When the current page change
         */
        "onKupPageChanged"?: (event: CustomEvent<{ newPage: number }>) => void;
        /**
          * When the rows per page change
         */
        "onKupRowsPerPageChanged"?: (event: CustomEvent<{ newRowsPerPage: number }>) => void;
        "perPage"?: number;
        "selectedPerPage"?: number;
    }
    interface KupProgressBar {
        /**
          * Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.
         */
        "centeredLabel"?: boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Sets a padding between the bar and its container. Not supported for the radial variant.
         */
        "hasPadding"?: boolean;
        /**
          * Sets a striped background. Not supported for the radial variant.
         */
        "hasStripes"?: boolean;
        /**
          * Flag to show or hide the progress bar's label.
         */
        "hideLabel"?: boolean;
        /**
          * Specifies an icon to replace the label.
         */
        "icon"?: string;
        /**
          * When striped background is active, it will be animated. Not supported for the radial variant.
         */
        "isAnimated"?: boolean;
        /**
          * Radial version.
         */
        "isRadial"?: boolean;
        /**
          * Slim version.
         */
        "isSlim"?: boolean;
        /**
          * Specifies a text for the bar's label.
         */
        "label"?: string;
        /**
          * The current value the progress bar must display.
         */
        "value"?: number;
    }
    interface KupQlik {
        /**
          * Set Qlik App's id would you like to use How to find app id --> https://support.qlik.com/articles/000026239
         */
        "appid"?: string;
        /**
          * Set gird border
         */
        "bordered"?: boolean;
        /**
          * Set Qlik Server's connection parameters  {host:'<server host>', port:'<server port http default:80 https default:443 >', prefix:'<virtual proxy prefix dafault: blank>', isSecure:<true/false>}
         */
        "config"?: QlikServer;
        /**
          * Set default obj's container pixel height
         */
        "defobjsize"?: string;
        /**
          * Do connection to Qlik Sever, if you have more component only one must have doconnection = "true"
         */
        "doconnection"?: boolean;
        /**
          * Define width of grid, with true width = 100% responsive, false 1200px
         */
        "fluid"?: boolean;
        /**
          * Set the grid structure (JSON) selections --> Data selection array     field   --> Qlik field on which to make the selection     values  --> Array of int or string value which to select rows     colums --> they define the structure of grid       obj     --> Qlik Object id would you like to render (How to find Qlik obj id --> https://help.qlik.com/en-US/sense-developer/June2020/Subsystems/Mashups/Content/Sense_Mashups/Howtos/mashups-obtain-app-object-id.htm)       colDim  --> define column's dimension, it could have values from 1 to 10 where 10 is 100%       size    --> define size height of obj's div container, it colud have this values XS|S|M|L|XL   Example: { selections:[   {       field: 'Anno',       values:[2020]   } ], rows:[   {     columns:[         {             obj:'KvqdmD', colDim:5, size:'L'         },         {             obj:'JjSaVm', colDim:5, size:'S'         }     ]   } ] }
         */
        "grid"?: Array<KupQlikGrid>;
        /**
          * System prop
         */
        "qlik"?: any;
    }
    interface KupRadio {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * List of elements.
         */
        "data"?: ComponentRadioElement[];
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel"?: boolean;
        /**
          * Defaults at null. It's the name that binds the radio buttons together.
         */
        "name"?: string;
        "onKupRadioBlur"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupRadioChange"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupRadioClick"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupRadioFocus"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupRadioInput"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
    }
    interface KupSearch {
        "data"?: TableData;
        "disabled"?: boolean;
        "extra"?: any;
        "initialValue"?: string;
        /**
          * Fired when the filter is submitted but only if in serverHandledFilter mode.
         */
        "onKupSearchFilterSubmitted"?: (event: CustomEvent<SearchFilterSubmittedEventDetail>) => void;
        "onKupSearchSelectionUpdated"?: (event: CustomEvent<SearchSelectionUpdatedEventDetail>) => void;
        /**
          * /** Function that can be invoked when the filter is submitted, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "searchCallBackOnFilterSubmitted"?: (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        /**
          * When true it emits events or makes available callbacks useful to obtain and filter data. When false the data inside data prop will be used and filtered in a static way.
         */
        "serverHandledFilter"?: boolean;
        /**
          * The field used to obtain value
         */
        "valueField"?: string;
    }
    interface KupSpinner {
        /**
          * When set to true the spinner is animating.
         */
        "active"?: boolean;
        /**
          * Decides whether the component is a bar or a spinner.
         */
        "barVariant"?: boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Width and height of the spinner. For the bar variant, only height.
         */
        "dimensions"?: string;
        /**
          * Places a blend modal over the wrapper to darken the view (or lighten, when the theme is dark).
         */
        "fader"?: boolean;
        /**
          * The time required for the "fader" to trigger.
         */
        "faderTimeout"?: number;
        /**
          * When set to true the component will fill the whole viewport.
         */
        "fullScreen"?: boolean;
        /**
          * When set to true the area covered by the component will be unclickable and the cursor will be changed to "wait".
         */
        "isUnclickable"?: boolean;
        /**
          * Sets the layout of the spinner.
         */
        "layout"?: number;
    }
    interface KupSwitch {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
         */
        "checked"?: boolean;
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Defaults at null. When specified, its content will be shown as a label.
         */
        "label"?: string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel"?: boolean;
        "onKupSwitchBlur"?: (event: CustomEvent<{
        value: string;
    }>) => void;
        "onKupSwitchChange"?: (event: CustomEvent<{
        value: string;
    }>) => void;
        "onKupSwitchClick"?: (event: CustomEvent<{
        value: string;
    }>) => void;
        "onKupSwitchFocus"?: (event: CustomEvent<{
        value: string;
    }>) => void;
        "onKupSwitchInput"?: (event: CustomEvent<{
        value: string;
    }>) => void;
    }
    interface KupTabBar {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * List of elements.
         */
        "data"?: ComponentTabBarElement[];
        "onKupTabBarBlur"?: (event: CustomEvent<{
        index: number;
        el: EventTarget;
    }>) => void;
        "onKupTabBarClick"?: (event: CustomEvent<{
        index: number;
        el: EventTarget;
    }>) => void;
        "onKupTabBarFocus"?: (event: CustomEvent<{
        index: number;
        el: EventTarget;
    }>) => void;
    }
    interface KupTextField {
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * When the text field is part of the autocomplete component and the list is opened, enter key selects the item and doesn't submit.
         */
        "emitSubmitEventOnEnter"?: boolean;
        /**
          * Defaults at false. When set to true, the component will be focused.
         */
        "forceFocus"?: boolean;
        /**
          * Defaults at false. When set to true, the component will be rendered at full height.
         */
        "fullHeight"?: boolean;
        /**
          * Defaults at false. When set to true, the component will be rendered at full width.
         */
        "fullWidth"?: boolean;
        /**
          * Defaults at null. When set, its content will be shown as a help text below the field.
         */
        "helper"?: string;
        /**
          * Defaults at false. When set, the helper will be shown only when the field is focused.
         */
        "helperWhenFocused"?: boolean;
        /**
          * Defaults at null. When set, the text-field will show this icon.
         */
        "icon"?: string;
        /**
          * Sets the initial value of the component
         */
        "initialValue"?: string;
        /**
          * The HTML type of the input element. It has no effect on text areas.
         */
        "inputType"?: string;
        /**
          * Enables a clear trailing icon.
         */
        "isClearable"?: boolean;
        /**
          * Defaults at null. When set, its content will be shown as a label.
         */
        "label"?: string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel"?: boolean;
        /**
          * Defaults at null. When set, the helper will display a character counter.
         */
        "maxLength"?: number;
        "onKupTextFieldBlur"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        "onKupTextFieldChange"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        "onKupTextFieldClearIconClick"?: (event: CustomEvent<{
        id: any;
    }>) => void;
        "onKupTextFieldClick"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        "onKupTextFieldFocus"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        "onKupTextFieldIconClick"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        "onKupTextFieldInput"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * When a keydown enter event occurs it generates
         */
        "onKupTextFieldSubmit"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Defaults at false. When set to true, the component will be rendered as an outlined field.
         */
        "outlined"?: boolean;
        /**
          * Sets the component to read only state, making it not editable, but interactable. Used in combobox component when it behaves as a select.
         */
        "readOnly"?: boolean;
        /**
          * Defaults at false. When set to true, the button will be rendered with shaped edges.
         */
        "shaped"?: boolean;
        /**
          * Defaults at false. When set to true, the component will be rendered as a textarea.
         */
        "textArea"?: boolean;
        /**
          * Defaults at null. When set, the icon will be shown after the text.
         */
        "trailingIcon"?: boolean;
        /**
          * Defaults at false. When set to true, the label will be on the right of the component.
         */
        "trailingLabel"?: boolean;
    }
    interface KupTooltip {
        /**
          * Data for top section
         */
        "data"?: TooltipData;
        /**
          * Data for the detail
         */
        "detailData"?: TooltipDetailData;
        /**
          * Timeout for loadDetail
         */
        "detailDataTimeout"?: number;
        /**
          * Layout used to display the items
         */
        "layout"?: string;
        "onKupActionCommandClicked"?: (event: CustomEvent<{
        actionCommand: TooltipAction;
    }>) => void;
        "onKupDefaultActionClicked"?: (event: CustomEvent<{
        obj: TooltipObject;
    }>) => void;
        "onKupDefaultOptionClicked"?: (event: CustomEvent<{
        obj: TooltipObject;
    }>) => void;
        "onKupTooltipLoadData"?: (event: CustomEvent<any>) => void;
        "onKupTooltipLoadDetail"?: (event: CustomEvent<any>) => void;
    }
    interface KupTree {
        /**
          * Auto select programmatic selectic node
         */
        "autoSelectionNodeMode"?: boolean;
        /**
          * The columns of the tree when tree visualization is active.
         */
        "columns"?: Column[];
        /**
          * Custom style to be passed to the component.
         */
        "customStyle"?: string;
        /**
          * The json data used to populate the tree view: the basic, always visible tree nodes.
         */
        "data"?: TreeNode[];
        /**
          * The density of the rows, defaults at 'medium' and can also be set to 'dense' or 'wide'.
         */
        "density"?: string;
        /**
          * Function that gets invoked when a new set of nodes must be loaded as children of a node. Used in combination with showObjectNavigation.  When useDynamicExpansion is set, the tree component will have two different behaviors depending on the value of this prop. 1 - If this prop is set to null, no callback to download data is available:     the component will emit an event requiring the parent to load the children of the given node. 2 - If this prop is set to have a callback, then the component will automatically make requests to load children of     a given node. After the load has been completed, a different event will be fired to alert the parent of the change.
          * @see useDynamicExpansion
         */
        "dynamicExpansionCallback"?: (
        treeNodeToExpand: TreeNode,
        treeNodePath: TreeNodePath
    ) => Promise<TreeNode[]> | undefined;
        /**
          * Flag: the nodes of the whole tree must be already expanded upon loading. Disabled nodes do NOT get expanded.
         */
        "expanded"?: boolean;
        /**
          * Allows to set initial filter for tree nodes, manages the filter on tree nodes.
         */
        "filterValue"?: string;
        /**
          * Activates the scroll on hover function
         */
        "hoverScroll"?: boolean;
        /**
          * When a tooltip request detail data
         */
        "onKupDetailRequest"?: (event: CustomEvent<{
        cell: Cell;
        tooltip: EventTarget;
    }>) => void;
        /**
          * When a tooltip request initial data
         */
        "onKupLoadRequest"?: (event: CustomEvent<{
        cell: Cell;
        tooltip: EventTarget;
    }>) => void;
        /**
          * When a cell option is clicked. If the cell option is the one of the TreeNodeCell, then column will be set to the fixed value {name: "TreeNodeCell", title: "TreeNodeCell"}.
         */
        "onKupOptionClicked"?: (event: CustomEvent<{
        cell: Cell;
        column: Column;
        treeNode: TreeNode;
    }>) => void;
        "onKupTreeNodeButtonClicked"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        column: Column;
        columnName: string;
        auto: boolean;
    }>) => void;
        /**
          * Fired when a TreeNode gets collapsed (closed).
         */
        "onKupTreeNodeCollapse"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
    }>) => void;
        /**
          * Fired when a node expansion ion has been triggered. Contains additional data when the tree is using the dynamicExpansion feature.
          * @event kupTreeNodeExpand
          * @type {object}
          * @property {TreeNodePath} treeNodePath - The array of indexes to retrieve the current treeNode inside the data prop.
          * @property {TreeNode} treeNode - Reference to the TreeNode data object which is being expanded (passed through the data prop).
          * @property {boolean} usesDynamicExpansion - Flag to notify that the component is running in dynamicExpansion mode.
          * @property {boolean} dynamicExpansionRequireChildren - Flag to notify that the current dynamicExpansion event requires the parent component to add TreeNode children to the given TreeNode.
          * @see useDynamicExpansion
          * @see dynamicExpansionCallback
          * @since 1.0.0
         */
        "onKupTreeNodeExpand"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        usesDynamicExpansion?: boolean;
        dynamicExpansionRequireChildren?: boolean;
    }>) => void;
        /**
          * Fired when a node of the tree has been selected
         */
        "onKupTreeNodeSelected"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        columnName: string;
        auto: boolean;
    }>) => void;
        /**
          * An array of integers containing the path to a selected child.\ Groups up the properties SelFirst, SelItem, SelName.
         */
        "selectedNode"?: TreeNodePath;
        /**
          * Shows the tree data as a table.
         */
        "showColumns"?: boolean;
        /**
          * When set to true enables the tree nodes filter.
         */
        "showFilter"?: boolean;
        /**
          * Flag: shows the header of the tree when the tree is displayed as a table.
          * @see showColumns
         */
        "showHeader"?: boolean;
        /**
          * Shows the icons of the nodes.
         */
        "showIcons"?: boolean;
        /**
          * When a node has options in its data and is on mouse over state while this prop is true, the node must shows the cog wheel to trigger object navigation upon click.  This will generate an event to inform the navigation object has been activated.
         */
        "showObjectNavigation"?: boolean;
        /**
          * When the component must use the dynamic expansion feature to open its nodes, it means that not all the nodes of the tree have been passed inside the data property.  Therefore, when expanding a node, the tree must emit an event (or run a given callback) and wait for the child nodes to be downloaded from the server.  For more information:
          * @see dynamicExpansionCallback
         */
        "useDynamicExpansion"?: boolean;
    }
    interface KupUpload {
        "onKetchupFileRejected"?: (event: CustomEvent<any>) => void;
        /**
          * Launched when file upload succeed
         */
        "onKetchupFileUploaded"?: (event: CustomEvent<any>) => void;
        "typeOptions"?: UploadProps;
    }
    interface IntrinsicElements {
        "kup-autocomplete": KupAutocomplete;
        "kup-badge": KupBadge;
        "kup-box": KupBox;
        "kup-btn": KupBtn;
        "kup-button": KupButton;
        "kup-calendar": KupCalendar;
        "kup-card": KupCard;
        "kup-chart": KupChart;
        "kup-chart-cell": KupChartCell;
        "kup-checkbox": KupCheckbox;
        "kup-checkbox-menu": KupCheckboxMenu;
        "kup-chip": KupChip;
        "kup-combobox": KupCombobox;
        "kup-crud": KupCrud;
        "kup-dash": KupDash;
        "kup-dash-list": KupDashList;
        "kup-data-table": KupDataTable;
        "kup-editor": KupEditor;
        "kup-field": KupField;
        "kup-form": KupForm;
        "kup-gauge": KupGauge;
        "kup-grid": KupGrid;
        "kup-iframe": KupIframe;
        "kup-image": KupImage;
        "kup-image-button": KupImageButton;
        "kup-layout": KupLayout;
        "kup-list": KupList;
        "kup-menu": KupMenu;
        "kup-modal": KupModal;
        "kup-nav-bar": KupNavBar;
        "kup-paginator": KupPaginator;
        "kup-progress-bar": KupProgressBar;
        "kup-qlik": KupQlik;
        "kup-radio": KupRadio;
        "kup-search": KupSearch;
        "kup-spinner": KupSpinner;
        "kup-switch": KupSwitch;
        "kup-tab-bar": KupTabBar;
        "kup-text-field": KupTextField;
        "kup-tooltip": KupTooltip;
        "kup-tree": KupTree;
        "kup-upload": KupUpload;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kup-autocomplete": LocalJSX.KupAutocomplete & JSXBase.HTMLAttributes<HTMLKupAutocompleteElement>;
            "kup-badge": LocalJSX.KupBadge & JSXBase.HTMLAttributes<HTMLKupBadgeElement>;
            "kup-box": LocalJSX.KupBox & JSXBase.HTMLAttributes<HTMLKupBoxElement>;
            "kup-btn": LocalJSX.KupBtn & JSXBase.HTMLAttributes<HTMLKupBtnElement>;
            "kup-button": LocalJSX.KupButton & JSXBase.HTMLAttributes<HTMLKupButtonElement>;
            "kup-calendar": LocalJSX.KupCalendar & JSXBase.HTMLAttributes<HTMLKupCalendarElement>;
            "kup-card": LocalJSX.KupCard & JSXBase.HTMLAttributes<HTMLKupCardElement>;
            "kup-chart": LocalJSX.KupChart & JSXBase.HTMLAttributes<HTMLKupChartElement>;
            "kup-chart-cell": LocalJSX.KupChartCell & JSXBase.HTMLAttributes<HTMLKupChartCellElement>;
            "kup-checkbox": LocalJSX.KupCheckbox & JSXBase.HTMLAttributes<HTMLKupCheckboxElement>;
            "kup-checkbox-menu": LocalJSX.KupCheckboxMenu & JSXBase.HTMLAttributes<HTMLKupCheckboxMenuElement>;
            "kup-chip": LocalJSX.KupChip & JSXBase.HTMLAttributes<HTMLKupChipElement>;
            "kup-combobox": LocalJSX.KupCombobox & JSXBase.HTMLAttributes<HTMLKupComboboxElement>;
            "kup-crud": LocalJSX.KupCrud & JSXBase.HTMLAttributes<HTMLKupCrudElement>;
            "kup-dash": LocalJSX.KupDash & JSXBase.HTMLAttributes<HTMLKupDashElement>;
            "kup-dash-list": LocalJSX.KupDashList & JSXBase.HTMLAttributes<HTMLKupDashListElement>;
            "kup-data-table": LocalJSX.KupDataTable & JSXBase.HTMLAttributes<HTMLKupDataTableElement>;
            "kup-editor": LocalJSX.KupEditor & JSXBase.HTMLAttributes<HTMLKupEditorElement>;
            "kup-field": LocalJSX.KupField & JSXBase.HTMLAttributes<HTMLKupFieldElement>;
            "kup-form": LocalJSX.KupForm & JSXBase.HTMLAttributes<HTMLKupFormElement>;
            "kup-gauge": LocalJSX.KupGauge & JSXBase.HTMLAttributes<HTMLKupGaugeElement>;
            "kup-grid": LocalJSX.KupGrid & JSXBase.HTMLAttributes<HTMLKupGridElement>;
            "kup-iframe": LocalJSX.KupIframe & JSXBase.HTMLAttributes<HTMLKupIframeElement>;
            "kup-image": LocalJSX.KupImage & JSXBase.HTMLAttributes<HTMLKupImageElement>;
            "kup-image-button": LocalJSX.KupImageButton & JSXBase.HTMLAttributes<HTMLKupImageButtonElement>;
            "kup-layout": LocalJSX.KupLayout & JSXBase.HTMLAttributes<HTMLKupLayoutElement>;
            "kup-list": LocalJSX.KupList & JSXBase.HTMLAttributes<HTMLKupListElement>;
            "kup-menu": LocalJSX.KupMenu & JSXBase.HTMLAttributes<HTMLKupMenuElement>;
            "kup-modal": LocalJSX.KupModal & JSXBase.HTMLAttributes<HTMLKupModalElement>;
            "kup-nav-bar": LocalJSX.KupNavBar & JSXBase.HTMLAttributes<HTMLKupNavBarElement>;
            "kup-paginator": LocalJSX.KupPaginator & JSXBase.HTMLAttributes<HTMLKupPaginatorElement>;
            "kup-progress-bar": LocalJSX.KupProgressBar & JSXBase.HTMLAttributes<HTMLKupProgressBarElement>;
            "kup-qlik": LocalJSX.KupQlik & JSXBase.HTMLAttributes<HTMLKupQlikElement>;
            "kup-radio": LocalJSX.KupRadio & JSXBase.HTMLAttributes<HTMLKupRadioElement>;
            "kup-search": LocalJSX.KupSearch & JSXBase.HTMLAttributes<HTMLKupSearchElement>;
            "kup-spinner": LocalJSX.KupSpinner & JSXBase.HTMLAttributes<HTMLKupSpinnerElement>;
            "kup-switch": LocalJSX.KupSwitch & JSXBase.HTMLAttributes<HTMLKupSwitchElement>;
            "kup-tab-bar": LocalJSX.KupTabBar & JSXBase.HTMLAttributes<HTMLKupTabBarElement>;
            "kup-text-field": LocalJSX.KupTextField & JSXBase.HTMLAttributes<HTMLKupTextFieldElement>;
            "kup-tooltip": LocalJSX.KupTooltip & JSXBase.HTMLAttributes<HTMLKupTooltipElement>;
            "kup-tree": LocalJSX.KupTree & JSXBase.HTMLAttributes<HTMLKupTreeElement>;
            "kup-upload": LocalJSX.KupUpload & JSXBase.HTMLAttributes<HTMLKupUploadElement>;
        }
    }
}
