//---- Basic form of the layout ----

// Variables keeping the attributes and classes used multiple times
$fill-space-attribute: fill-space;
$horizontal-attribute: horizontal;
$multiple-column-class: lyo-multiple-columns;

$vertical-attribute: vertical;
$content-based-col-width: content-based-columns-width;

/**
* @prop --lyo_column-number, --kup-layout_column-number: Number of columns. This property is regulated by the columnsNumber property, but can be overridden by !important declarations.
* @prop --lyo_grid-gap, --kup-layout_grid-gap: Space between two adjacent cells (on columns and rows).
*/

// When no options are set
:host {
  --lyo_column-number: var(--kup-layout_column-number, 1);
  --lyo_grid-gap: var(--kup-layout_grid-gap, 2px);

  //-- Basic style --
  display: inline-grid;
  grid-auto-flow: row;
  grid-column: 1;
  grid-gap: var(--lyo_grid-gap) var(--lyo_grid-gap); // Old name of the property
  gap: var(--lyo_grid-gap) var(--lyo_grid-gap); // New name of the property
  grid-row: auto;
  // Basic usage for the width of the cells is to have equal width if possible
  grid-template-columns: repeat(var(--lyo_column-number), 1fr);
}

// When columns size must be decided by the column content.
:host([content-based-columns-width]) {
  grid-template-columns: repeat(var(--lyo_column-number), minmax(min-content, auto));
}

// WHen there are multiple columns, elements are placed one cell after the other and going on to rows.
:host(.#{$multiple-column-class}) {
  --kup-layout_column-number: 2;
}

//-- Filling space in a normal situation make the container take all available width --
:host([#{$fill-space-attribute}]) {
  display: grid;
  text-align: center;
  width: 100%;
}

//-- when there is one column
:host([#{$vertical-attribute}]) {
  //display: grid;
  //grid-template-columns: auto;
  grid-gap: 10px;
  padding: 10px;
}

//-- auto set width cell 
:host([#{$content-based-col-width}]) {
  //white-space: nowrap;
  table-layout: auto;
  column-width: auto;
  //grid-auto-columns: 1fr;
}

//---- In horizontal mode ----
// IMPORTANT: The horizontal mode is not activated when more than one column is specified

//-- Basic horizontal mode --
// [1] - Mandatory to allow items to be placed on the same line and be contained inside a scrollable div
// [F1] - Currently this is set to 'visible' due to a bug on MacOS:
//    on other web browsers, using 'auto' would make the content of the div
//    be scrollable, but only on MacOS this behavior is not respected and the div is not scrollable at all.
//    However, putting this property to 'visible' will make elements go outside their container boundary box.
:host([#{$horizontal-attribute}]:not(.#{$multiple-column-class})) {
  display: inline-block;
  max-width: 100%;
  overflow: visible; // [1][F1]
  white-space: nowrap; // [1]
}

//-- When there is also the fill-space attribute set --
// This declaration takes advantage of style declared inside [1]
// [2] - Mandatory to override the rule in base host member -> in this way all columns will try to take the available space
:host([#{$horizontal-attribute}][#{$fill-space-attribute}]:not(.#{$multiple-column-class})) {
  display: grid;
  grid-auto-columns: 1fr;
  grid-auto-flow: column;
  grid-template-columns: 0; // [2]
  width: 100%;
}
