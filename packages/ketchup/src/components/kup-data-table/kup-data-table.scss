@import url(https://cdn.materialdesignicons.com/4.5.95/css/materialdesignicons.min.css);

/**
* @prop --dtt_background-color, --kup-data-table_background-color: background-color of the whole component (paginator and table).
* @prop --dtt_border-color, --kup-data-table_border-color: border-color for the whole table.
* @prop --dtt_box-shadow, --kup-data-table_box-shadow: common box-shadow used by the table.
* @prop --dtt_color, --kup-data-table_color: Text color of the column menu when hovering a header cell.
* @prop --dtt_cell-image_max-height, --kup-data-table_cell-image_max-height: The max height images object inside cells can have
* @prop --dtt_cell-image_min-height, --kup-data-table_cell-image_min-height: The minimum height images object inside cells can have
* @prop --dtt_drag-over--allowed, --kup-data-table_drag-over--allowed: the color of the cell when the drop of the drag is allowed.
* @prop --dtt_drag-over--forbidden, --kup-data-table_drag-over--forbidden: the color of the cell when the drop of the drag is forbidden.
* @prop --dtt_filter-border-color, --kup-data-table_filter-border-color: Sets border color onto kup-text-field elements used to filter rows.
* @prop --dtt_filter-background-color, --kup-data-table_filter-background-color: Sets background color onto kup-text-field elements used to filter rows.
* @prop --dtt_group-background-color, --kup-data-table_group-background-color: background-color when grouping elements.
* @prop --dtt_hover-color, --kup-data-table_hover-color: text color of a row when it's selected or hovered.
* @prop --dtt_head-background-color, --kup-data-table_head-background-color: Background color of the table header.
* @prop --dtt_hover-background-color, --kup-data-table_hover-background-color: background-color of a row when it's selected or hovered.
* @prop --dtt_icons-color, --kup-data-table_icons-color: Color of a table icon.
* @prop --dtt_icons-hover-color, --kup-data-table_icons-hover-color: Color of a hovered icon.
* @prop --dtt_font-size, --kup-data-table_font-size: Sets basic font size.
* @prop --dtt_main-color, --kup-data-table_main-color: Set text color. Has the precedence.
* @prop --dtt_main-color-lighter, --kup-data-table_main-color: Set lighter text color. Has the precedence.
* @prop --dtt_main-color-darker, --kup-data-table_main-color: Set darker text color. Has the precedence.
* @prop --dtt_text-on-main-color, --kup-data-table_text-on-main-color: Color of the grouping chips of a column.
* @prop --dtt_density-box-shadow, --kup-data-table_density-box-shadow: Box shadow of the density combo, to match paginator's.
* @prop --dtt_density-icon-background, --kup-data-table_density-icon-background: Background of the density icon, to match paginator's.
* @prop --dtt_density-icon-color, --kup-data-table_density-icon-color: Color of the density icon, to match paginator's.
* @prop --dtt_remove-icon-color, --kup-data-table_remove-icon-color: Color of the remove group icon.
* @prop --dtt_remove-icon-color-hover, --kup-data-table_remove-icon-color-hover: Color of the remove group icon at hover.
* @prop --dtt_paginator-background, --kup-data-table_paginator-background: Color of the paginator's background.
* @prop --dtt_table-wrapper-height, --kup-data-table_table-wrapper-height: The height of the table inside the data table.
*/

:host {
  // variables
  --dtt_background-color: var(--kup-data-table_background-color, #ffffff);
  --dtt_border-color: var(--kup-data-table_border-color, #{$gray-bd});
  --dtt_box-shadow: var(
    --kup-data-table_box-shadow,
    0px 0px 7.5px 0px rgba(128, 128, 128, 0.5)
  );
  --dtt_color: var(--kup-data-table_color, #{$gray-1a});
  --dtt_drag-over--allowed: var(
    --kup-data-table_drag-over--allowed,
    #{rgba($smeup-primary, 0.24)}
  );
  --dtt_drag-over--forbidden: var(
    --kup-data-table_drag-over--forbidden,
    #{rgba($smeup-danger, 0.24)}
  );
  --dtt_filter-border-color: var(
    --kup-data-table_filter-border-color,
    #{$gray-d0}
  );
  --dtt_filter-background-color: var(
    --kup-data-table_filter-background-color,
    white
  );
  --dtt_group-background-color: var(
    --kup-data-table_group-background-color,
    #{$gray-f9}
  );
  --dtt_hover-color: var(--kup-data-table_hover-color, #{$mainTextColor});
  --dtt_head-background-color: var(
    --kup-data-table_head-background-color,
    #f4f4f4
  );
  --dtt_cell-image_max-height: var(
    --kup-data-table_cell-image_max-height,
    64px
  );
  --dtt_cell-image_min-height: var(--kup-data-table_cell-image_min-height, 0);
  --dtt_hover-background-color: var(
    --kup-data-table_hover-background-color,
    #{$gray-f0}
  );
  --dtt_icons-color: var(--kup-data-table_icons-color, #{$gray-80});
  --dtt_icons-hover-color: var(
    --kup-data-table_icons-hover-color,
    #{$smeup-primary}
  );
  --dtt_font-size: var(--kup-data-table_font-size, 0.9375rem);
  --dtt_main-color: var(--kup-data-table_main-color, #6aaaa7);
  --dtt_main-color-lighter: var(
    --kup-data-table_main-color-lighter,
    #{lighten($smeup-primary, 10)}
  );
  --dtt_main-color-darker: var(
    --kup-data-table_main-color-darker,
    #{darken($smeup-primary, 10)}
  );
  --dtt_text-on-main-color: var(--kup-data-table_text-on-main-color, #ffffff);
  --dtt_negative-number-color: var(
    --kup-data-table_negative-number-color,
    #{$mainRed}
  );
  --dtt_density-box-shadow: var(--kup-data-table_density-box-shadow, none);
  --dtt_density-icon-background: var(
    --kup-data-table_density-icon-background,
    transparent
  );
  --dtt_density-icon-color: var(
    --kup-data-table_density-icon-color,
    #{$mainTextColor}
  );
  --dtt_remove-icon-color: var(--kup-data-table_remove-icon-color, #{$mainRed});
  --dtt_remove-icon-color-hover: var(
    --kup-data-table_remove-icon-color-hover,
    #{lighten($mainRed, 10)}
  );
  --dtt_paginator-background: var(
    --kup-data-table_paginator-background,
    transparent
  );

  --dtt_table-wrapper-height: var(--kup-data-table_table-wrapper-height, auto);

  position: relative;
}

//-------- Fixed columns and rows declarations --------
/*
* Section comments declarations.
* [fcr-ff] - This is a workaround necessary to support correctly the Firefox browser,
*
*/

// The z-index of the data table main wrapper.
$table-below-wrapper--z-index: 0;
// z-indexes to allow correct layering of different pieces of fixed and sticky positioning
// These values must be decreasing order
$sticky-header--z-index: 10;
$sticky-cell--row-column-z-index: 8;
$sticky-cell--column-z-index: 6;
$sticky-cell--row-z-index: 4;

// Base style for the cells which are sticky
%fixedCellsBase {
  background-color: var(--dtt_background-color);
  position: sticky;

  &:hover {
    background-color: var(--dtt_hover-background-color);
  }

  // For fixed headers, we must set a different background and place the correct z-index to prevent overlapping.
  thead &,
  sticky-header & {
    background-color: var(--dtt_head-background-color);
    z-index: #{$sticky-header--z-index};

    &:hover {
      background-color: var(--dtt_head-background-color);
    }
  }
}

//-- Fixed cells (rows and columns) --
$fixed-row-class: fixed-row;

@mixin fixedRowSeparator($bottom-position) {
  bottom: $bottom-position;
  border-bottom: 1px solid var(--dtt_border-color);
  content: '';
  height: 0;
  left: 0;
  position: absolute;
  right: 0;
  width: auto;
  z-index: 1;
}

@mixin fixedColumnSeparator($right-position) {
  bottom: 0;
  border-right: 1px solid var(--dtt_border-color);
  content: '';
  height: auto;
  position: absolute;
  right: $right-position;
  top: 0;
  width: 0;
  z-index: 1;
}

// For a fixed row
.#{$fixed-row-class} {
  @extend %fixedCellsBase;
  top: 0;
  z-index: $sticky-cell--row-z-index;

  // When the cell must keep its border
  thead &::after,
  &.show-row-separator::after {
    @include fixedRowSeparator(-1px);
  }

  // @see [fcr-ff]
  @supports (-moz-appearance: none) {
    .column-separation &::before {
      @include fixedColumnSeparator(0);
    }

    .row-separation &::after {
      @include fixedRowSeparator(
        0
      ); // marked as !important otherwise the previous declaration will take precedence
    }
  }
}

// For a fixed column
// MUST be after to take precedence
.fixed-column {
  @extend %fixedCellsBase;
  left: 0;
  z-index: $sticky-cell--column-z-index; // Must be higher than row

  // When the cell must keep its border
  &.show-column-separator::before {
    @include fixedColumnSeparator(-1px);
  }

  // This is a small fix for Firefox since it has a strange bug which "compresses" the content of the sticky cells
  @supports (-moz-appearance: none) {
    .column-separation &::before {
      @include fixedColumnSeparator(0);
    }

    .row-separation &::after {
      @include fixedRowSeparator(0);
    }

    .row-separation &:not(.#{$fixed-row-class})::after {
      bottom: -1px;
    }
  }

  // When there is both the column and the row fixed
  &.#{$fixed-row-class} {
    z-index: $sticky-cell--row-column-z-index; // Must be higher than column
  }
}

//-------- TABLE WRAPPER --------
#data-table-wrapper {
  background-color: var(--dtt_background-color);

  //---- Below wrapper ----
  // contains the table and other bottom elements of the matrix

  .below-wrapper {
    height: var(--dtt_table-wrapper-height);
    overflow: auto;
    z-index: $table-below-wrapper--z-index;
  }

  .below-wrapper.custom-size {
    overflow: unset;
  }

  .below-wrapper:not(.custom-size) {
    overflow-x: auto;
  }

  /*
   * Tags legend:
   * [column-width-related] Marks a comment which is related to the columns size issue when a custom size is specified.
   */
  table {
    border-collapse: collapse;
    color: var(--dtt_color);
    font-size: var(--dtt_font-size);
    min-width: intrinsic; /* Safari/WebKit uses a non-standard name */
    min-width: -moz-max-content; /* Firefox/Gecko */
    min-width: -webkit-max-content; /* Chrome */
    text-align: left;
    width: 100%;

    /* Class to put the table in "width auto" mode: in this way, if all visible columns have a fixed size,
     * the table automatically has a size equal to the sum of the sizes all columns.
     * Additionally it must remove the min width specification to allow a correct sizing.
     * [column-width-related][mandatory]
     *
     * The property "table-layout" is mandatory to override the default algorithm by which the browsers renders the tables.
     * This algorithm simply tries to adjust the table cell width to fit its content as best as it can.
     * But this is in contrast with having specified widths for the cells.
     * However, Firefox has a rendering error when "table-layout: fixed" and "width: -moz-fit-content;" are set on a table
     * at the same time and there is even one column with no specified size: that column automatically gets the maximum width
     * the browser itself can withstand. In contrast with V8 browsers, where the table is rendered correctly.
     * Vice versa, by not using the "table-layout: fixed", Firefox renders correctly the table while V8 doesn't.
     * In addition, there are also other size cases where there are similar rendering errors.
     * Currently the most convenient solution that I've found is to manually set the desired max and min widths on all the
     * cells of single column, if that column must have a given size.
     *
     * NOTES:
     * [1] - If we do not place these properties in the correct order, on Firefox we will find that the
     *     tables takes the whole available place, therefore fixed sizes are not respected.
     * [2] - On the contrary, without using these properties, V8 browsers will not understand that the table must have
     *     the width equal to the sum of all columns widths.
     * [3] - Mandatory for width property to take effect.
     */
    &.auto-width {
      min-width: auto; // [mandatory] See [1] [2]
      width: 0; // [mandatory] See [1] [2]
    }

    &.custom-size th {
      position: sticky;
      top: 0;
      z-index: 1;
    }

    > thead {
      background: var(--dtt_head-background-color);
      border: 1px solid var(--kup-border-color);

      // Table header styles
      th {
        background: var(--dtt_head-background-color);
        border-bottom: 2px solid var(--kup-border-color);
        border-right: 1px solid var(--kup-border-color);
        box-sizing: border-box; // [column-width-related][mandatory] make specified sizes be respected
        padding: 0.5rem 0.3125rem;
        text-overflow: ellipsis; // [column-width-related][mandatory] places ... to shorten table caption
        top: 0; // This is mandatory for the sticky
        // Enforce consistent vertical alignment with sibiling header cells
        //  when filter field or sort/filter icons are present.
        vertical-align: middle;
        white-space: nowrap; // [column-width-related][mandatory] Text cannot wrap

        // The after for the rows separator element fallback for Firefox and sticky rows
        &::after {
          @include fixedRowSeparator(0);
          border-bottom: 2px solid var(--kup-border-color);
          bottom: -2px;
        }

        // The before for the columns separator element fallback for Firefox and sticky columns
        // Not clear why it's needed, removing on 05/12/2020
        //&::before {
        //  @include fixedColumnSeparator(0);
        //  right: -1px;
        //}

        & .filter-remove {
          --kup-main-color: var(--kup-icon-color);
          display: inline-block;
          margin-left: 0.25rem;
        }

        // On Firefox, things changes
        @supports (-moz-appearance: none) {
          // Remove the border bottom, because it causes too much trouble
          // FFS, tried re-enabling it on 05/11/2020
          // border-bottom: 0;

          // The row separator:
          &::after {
            bottom: 0; // Is slightly placed to the bottom
            left: -1px; // gets slightly bigger to cover the absence of a border-right
          }

          // The column separator
          &::before {
            content: none; // Is not rendered on firefox because it does not render right-border on thead.
          }
        }

        //---- Column name container ----
        $column-sort-margin: 0.5rem;

        .column-title {
          // Mandatory to allow ellipsis of the the column title when column size is really small.
          display: inline-block; // Mandatory to allow width related props to take effect
          //  max-width: calc(100% - var(--dtt_font-size) - #{$column-sort-margin});
          overflow: hidden;
          text-overflow: ellipsis;
          vertical-align: bottom;
          white-space: normal;
        }

        &.icon {
          width: 30px;
        }

        &.number {
          text-align: right;
        }

        &.centered {
          text-align: center;
        }

        //---- Filters ----
        kup-text-field.datatable-filter {
          --kup-text-field_border-color: var(--dtt_filter-border-color);
          --kup-text-field_background-color: var(--dtt_filter-background-color);
        }

        //---- Sort and remove-filter icons ----
        // Base for an header cell
        &.header-cell {
          // When column is sortable
          &--sortable {
            cursor: pointer;
          }
        }

        .column-sort {
          float: left;
          margin: 0 $column-sort-margin;
        }

        .remove-filter {
          cursor: pointer;
          fill: var(--dtt_icons-color);
          margin-left: $column-sort-margin;
          transition: color 0.2s ease-in-out;
          vertical-align: text-top;
          width: var(--dtt_font-size);

          &:hover {
            fill: var(--dtt_icons-hover-color);
          }
        }

        //---- Column menu icon ----
        .column-menu {
          background-color: var(--dtt_background-color);
          box-shadow: var(--dtt_box-shadow);
          display: none;
          color: var(--dtt_color);
          position: absolute;
          z-index: 100;
          font-weight: normal;
          min-width: 200px;
          min-width: -moz-max-content; /* Firefox/Gecko */
          min-width: -webkit-max-content; /* Chrome */

          &.visible.dynamic-position-active {
            display: block;
            -webkit-animation: display-none-transition 0.5s both;
            -webkit-animation-timing-function: cubic-bezier(
              0.67,
              -0.81,
              0.89,
              0.71
            );
            animation: display-none-transition 0.5s both;
            animation-timing-function: cubic-bezier(0.67, -0.81, 0.89, 0.71);
          }

          ul {
            list-style-type: none;
            margin: 0; // override browser default
            padding: 0; // override browser default
            text-align: left;

            > li {
              padding: 0 0.5rem;
              transition: color 0.2s ease-in-out;
              color: var(--dtt_color);
              transition: color 0.25s, background-color 0.25s, opacity 0.25s;

              &.textfield-row {
                padding: 0.5rem 0.5rem;
              }

              &.button-row {
                border-bottom: 1px solid var(--kup-border-color);
              }

              &.checkbox-row {
                max-height: 20vh;
                overflow: auto;
              }

              & kup-button {
                display: inline-block;
              }
            }
          }
        }
      }

      //---- Columns drag style ----

      &[columns-dragging] {
        // When the drag is over a valid target
        [drag-over] {
          background-color: var(--dtt_drag-over--allowed);

          // Mandatory to allow a correct drop effect when dragging
          > * {
            pointer-events: none;
          }
        }

        // When the drag is over but it is the starting element
        [drag-over][drag-starter] {
          background-color: var(--dtt_drag-over--forbidden);
        }
      }
    }

    //-------- data-table main body --------
    > tbody {
      border: 1px solid var(--dtt_border-color);
      cursor: auto;

      > tr {
        kup-button {
          display: inline-block;
        }

        &:not(.group-total):hover,
        &:hover + .group-total,
        &.selected {
          > td {
            color: var(--dtt_hover-color);
            background-color: var(--dtt_hover-background-color);
            transition: background-color 250ms ease-in-out;
          }
        }

        // grouping
        &.group {
          background: var(--dtt_group-background-color);
          font-weight: bold;
          border-top: 1px solid var(--dtt_border-color);
          cursor: pointer;

          &.group-label {
            border-bottom: none;
          }

          &.group-total {
            border-top: none;
            line-height: 0.5rem;
          }

          > td {
            padding: 0.5rem 0;

            .group-cell-content {
              .icon-container,
              .indent {
                float: left;
              }
              .icon-container {
                margin: 0 0.25rem;
                height: 1.25rem;
                width: 1.25rem;
              }
              kup-image {
                &.collapsed {
                  transform: rotate(90deg);
                }
                &.expanded {
                  transform: rotate(180deg);
                }
              }
              .indent {
                margin-left: 0.25rem;
              }
              > span {
                display: inline-flex;
                outline: none;
                margin-left: 0.25rem;
              }
            }

            &.total {
              text-align: right;
              padding: 0.5rem 0.3125rem;
            }
          }
        }

        > td {
          $options-margin: 0.5rem;

          box-sizing: border-box; // [column-width-related][mandatory] cells total width can is established by prop
          padding: 0.5rem 0.3125rem;
          word-break: break-all; // [column-width-related][mandatory] Breaks text if it has to be wrapped
          word-wrap: break-word; // [column-width-related][mandatory] Breaks text if it has to be wrapped

          // tooltip
          kup-tooltip.datatable-tooltip {
            --kup-tlt_display: table-row;
          }

          &.number {
            .cell-content {
              display: block;
              text-align: right;
            }
          }

          .row-expander {
            margin-right: 0.5rem;
          }

          .indent {
            display: inline-block;
            height: 1rem;
            width: 2rem;
          }

          .options {
            margin-left: $options-margin;
            color: var(--dtt_icons-color);

            &:hover {
              color: var(--dtt_icons-hover-color);
              transition: color 250ms ease-out;
            }
          }

          .row-action {
            margin-right: 0.2rem;
          }

          // The container of the effective cell content
          .cell-content {
            display: flex;

            &.has-padding {
              box-sizing: border-box;
              padding: 1rem;
            }

            // When there is the necessity to hide long text
            :host([force-one-line]) & {
              display: inline-block; // [column-width-related][mandatory][3]
              max-width: 100%;
              overflow: hidden;
              text-overflow: ellipsis;
              vertical-align: middle;
              white-space: nowrap;
              width: 100%;
            }

            &.is-tooltip {
              position: relative;
            }

            &.is-vertical,
            :host([force-one-line]) &.is-vertical {
              display: inline-flex;
              margin: auto;
              width: -webkit-fill-available;
              align-items: center;
              & > * {
                margin: auto;
              }
            }

            &.negative-number {
              color: var(--dtt_negative-number-color);
            }
          }

          // When a cell has options
          &.has-options {
            .cell-content {
              // When there is the necessity to hide long text
              :host([force-one-line]) & {
                // Takes into account the size of the cogwheel icon and its margin
                // TODO there is also the indentation to take in account. A mini refactor on how indentation works could be useful
                width: calc(100% - #{$options-margin} - var(--dtt_font-size));
              }
            }
          }

          &.is-graphic {
            padding: 0 1px;
          }

          kup-lazy {
            display: flex;
            margin: auto;
          }

          & .indent ~ kup-lazy,
          & .indent ~ kup-image,
          & .indent ~ kup-button {
            display: inline-block;
            margin: 0;
            vertical-align: middle;
          }

          // Class assigned to the image of a cell
          // Allows regulation of sizes
          .cell-image {
            max-height: var(--dtt_cell-image_max-height);
            min-height: var(--dtt_cell-image_min-height);
          }
        }
      }
    }

    &.row-separation > tbody > tr {
      border-bottom: 1px solid var(--dtt_border-color);
    }

    &.column-separation > tbody > tr > td {
      border-right: 1px solid var(--dtt_border-color);
    }

    & sticky-header {
      display: none;
    }

    &.persistent-header {
      & ~ sticky-header {
        background: var(--dtt_head-background-color);
        border-bottom: 2px solid var(--dtt_border-color);
        box-shadow: var(--dtt_box-shadow);
        color: var(--dtt_color);
        display: block;
        opacity: 0;
        overflow: hidden;
        pointer-events: none;
        position: fixed;
        top: 0;
        transition: opacity 0.25s ease-in-out;

        &.activated {
          opacity: 1;
          pointer-events: all;
          z-index: $sticky-header--z-index;
        }

        &[hidden] {
          display: none;
        }

        tr-sticky {
          display: inline-flex;
        }

        th-sticky {
          box-sizing: border-box;
          display: inline-flex;
          padding: 0.5rem 0.3125rem;

          &.icon {
            width: 30px;
          }

          &.number {
            text-align: right;
          }

          &.centered {
            text-align: center;
          }
        }

        .column-title {
          width: 100%;
          font-weight: bold;
          margin: auto;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        }
      }
    }

    > tfoot {
      td {
        text-align: right;
        font-weight: bold;
        padding: 0.5rem 0.3125rem;
      }
    }

    &.noGrid {
      &,
      td {
        border: none;
      }
    }

    &.density- {
      kup-lazy.to-be-loaded {
        height: 36px;
      }

      &dense {
        tbody > tr > td:not(.is-graphic) {
          padding-top: 0.2rem;
          padding-bottom: 0.2rem;
        }
        tbody > tr.group > td {
          padding-top: 0.25rem;
          padding-bottom: 0.25rem;
        }
        kup-lazy.to-be-loaded {
          height: 26px;
        }
      }

      &wide {
        tbody > tr > td:not(.is-graphic) {
          padding-top: 1rem;
          padding-bottom: 1rem;
        }
        tbody > tr.group > td {
          padding-top: 0.75rem;
          padding-bottom: 0.75rem;
        }
        kup-lazy.to-be-loaded {
          height: 50px;
        }
      }
    }

    &.fontsize- {
      &small {
        font-size: calc(var(--dtt_font-size) * 0.75);
        transition: font-size 0.1s;

        .group-cell-content {
          > span {
            &:before {
              font-size: calc(var(--dtt_font-size) * 1) !important;
            }
          }
        }
      }
      &big {
        font-size: calc(var(--dtt_font-size) * 1.25);
        transition: font-size 0.1s;

        .group-cell-content {
          > span {
            &:before {
              font-size: calc(var(--dtt_font-size) * 1.5) !important;
            }
          }
        }
      }
    }
  }

  .paginator-wrapper {
    background: var(--dtt_paginator-background);
    display: flex;
    flex-flow: wrap;
    min-width: max-content;
    min-height: 2rem;
  }
}

// global filter
#globalFilter {
  margin-bottom: 0.5rem;
  text-align: center;
}

// grouping chips
#group-chips {
  display: flex;

  > .group-chip {
    display: flex;
    background-color: var(--dtt_main-color);
    padding: 0.5rem;
    color: var(--dtt_text-on-main-color);
    margin-right: 0.5rem;
    cursor: pointer;
    transition: opacity 0.2s ease-in-out;

    &:hover {
      opacity: 0.75;
    }
  }
}

.paginator-tabs {
  width: 100%;

  & kup-paginator {
    display: inline-flex;
  }

  .loadmore-button {
    position: relative;
    background: none;
    border: none;
    height: 100%;
    cursor: pointer;
    outline: none;
    margin: 0.5rem 0 0;
    padding: 0 0.25rem;
    float: right;

    .paginator-tab-text {
      margin-left: 0.25rem;
      transition: color 0.25s ease;
    }

    &:before {
      transition: color 0.25s ease;
    }

    &:hover,
    &.activated {
      &:before,
      & .paginator-tab-text {
        color: var(--dtt_main-color);
      }
    }
  }

  .customize-panel {
    cursor: default;
    opacity: 0;
    pointer-events: none;
    width: 200px; //I.E.
    width: fit-content;
    background: var(--dtt_background-color);
    box-shadow: var(--dtt_box-shadow);
    transition: opacity 0.25s ease;

    &.visible {
      opacity: 1;
      pointer-events: all;
    }

    & .panel-label {
      min-width: 150px;
      text-align: left;
      text-overflow: ellipsis;
      max-width: 150px;
      overflow: hidden;
      color: var(--dtt_color);
      font-size: calc(var(--dtt_font-size) * 0.9);
    }
  }

  .paginator-button {
    position: relative;
    background: none;
    border: none;
    height: 100%;
    cursor: pointer;
    outline: none;
    margin-left: 0.25rem;
    padding: 0 0.25rem;
    float: right;

    & span {
      cursor: default;
    }

    &:before,
    & span.density-label,
    & span.fontsize-label {
      color: var(--dtt_density-icon-color);
      vertical-align: middle;
      transition: color 0.25s;
      cursor: pointer;
    }

    &:before {
      font-size: 120%;
    }

    & span.density-label,
    & span.fontsize-label {
      font-size: calc(var(--dtt_font-size) * 0.9);
    }

    &:hover,
    &.activated {
      &:before,
      & span.density-label,
      & span.fontsize-label {
        color: var(--dtt_main-color);
      }
    }

    .paginator-tab-text {
      margin-left: 0.25rem;
    }
  }
}

.density-panel,
.fontsize-panel {
  position: relative;
  margin: 0.7rem;
  display: flex;
  align-items: center;
  box-shadow: var(--dtt_density-box-shadow);
  width: 200px; //I.E.
  width: max-content;

  .density-label,
  .fontsize-label {
    padding: 0.5rem 0.5rem;
    cursor: pointer;
  }

  svg {
    height: 1.5rem;
    width: 1.5rem;
  }

  [role='button'] {
    outline: none;
    cursor: pointer;
    display: flex;

    svg {
      fill: #{$gray-bd};
    }
  }

  .density-panel-overlay,
  .fontsize-panel-overlay {
    background: var(--dtt_background-color);
    position: absolute;
    top: 1.6rem;
    right: 0;
    display: none;
    opacity: 0;
    z-index: 10;
    box-shadow: #{$mainShadow};
    width: 100px; // I.E. fallback
    width: max-content;

    .wrapper {
      display: flex;
      align-items: center;
      outline: none;
      color: var(--dtt_color);
      cursor: pointer;
      padding: 0.5rem 1rem;
      transition: color 0.25s, background-color 0.25s, opacity 0.25s;

      &:first-child {
        padding-top: 0.75rem;
      }

      &:last-child {
        padding-bottom: 0.75rem;
      }

      svg {
        margin-right: 0.5rem;
        fill: var(--dtt_color);
      }

      &:hover,
      &.active {
        color: var(--dtt_hover-color);
        background-color: var(--dtt_hover-background-color);
        svg {
          fill: var(--dtt_hover-color);
        }
      }
    }

    &.open {
      opacity: 1;
      display: block;
    }
  }
}

@-webkit-keyframes display-none-transition {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes display-none-transition {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

// Button to load more records.
.load-more-records {
  background-color: transparent;
  border: 0 none;
  color: var(--dtt_icons-color);
  cursor: pointer;
  display: inline-block;
  font-size: calc(var(--dtt_font-size) * 1.2);
  height: calc(var(--dtt_font-size) * 1.2);
  margin: 0 6px;
  padding: 0;
  transition: color 0.3s;
  width: calc(var(--dtt_font-size) * 1.2);

  &:hover {
    color: var(--dtt_icons-hover-color);
  }

  &::before {
    height: inherit;
    width: inherit;
  }
}
